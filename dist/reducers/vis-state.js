'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _handleActions;

// updater functions


var _actionTypes = require('../constants/action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _reduxActions = require('redux-actions');

var _visStateUpdaters = require('./vis-state-updaters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// construct vis-state reducer
var rootReducer = (0, _reduxActions.handleActions)((_handleActions = {}, _handleActions[_actionTypes2.default.ADD_FILTER] = _visStateUpdaters.addFilterUpdater, _handleActions[_actionTypes2.default.ADD_LAYER] = _visStateUpdaters.addLayerUpdater, _handleActions[_actionTypes2.default.ENLARGE_FILTER] = _visStateUpdaters.enlargeFilterUpdater, _handleActions[_actionTypes2.default.INTERACTION_CONFIG_CHANGE] = _visStateUpdaters.interactionConfigChangeUpdater, _handleActions[_actionTypes2.default.LAYER_CLICK] = _visStateUpdaters.layerClickUpdater, _handleActions[_actionTypes2.default.LAYER_CONFIG_CHANGE] = _visStateUpdaters.layerConfigChangeUpdater, _handleActions[_actionTypes2.default.LAYER_HOVER] = _visStateUpdaters.layerHoverUpdater, _handleActions[_actionTypes2.default.LAYER_TYPE_CHANGE] = _visStateUpdaters.layerTypeChangeUpdater, _handleActions[_actionTypes2.default.LAYER_VIS_CONFIG_CHANGE] = _visStateUpdaters.layerVisConfigChangeUpdater, _handleActions[_actionTypes2.default.LAYER_VISUAL_CHANNEL_CHANGE] = _visStateUpdaters.layerVisualChannelChangeUpdater, _handleActions[_actionTypes2.default.LOAD_FILES] = _visStateUpdaters.loadFilesUpdater, _handleActions[_actionTypes2.default.LOAD_FILES_ERR] = _visStateUpdaters.loadFilesErrUpdater, _handleActions[_actionTypes2.default.MAP_CLICK] = _visStateUpdaters.mapClickUpdater, _handleActions[_actionTypes2.default.RECEIVE_MAP_CONFIG] = _visStateUpdaters.receiveMapConfigUpdater, _handleActions[_actionTypes2.default.REMOVE_DATASET] = _visStateUpdaters.removeDatasetUpdater, _handleActions[_actionTypes2.default.REMOVE_FILTER] = _visStateUpdaters.removeFilterUpdater, _handleActions[_actionTypes2.default.REMOVE_LAYER] = _visStateUpdaters.removeLayerUpdater, _handleActions[_actionTypes2.default.REORDER_LAYER] = _visStateUpdaters.reorderLayerUpdater, _handleActions[_actionTypes2.default.RESET_MAP_CONFIG] = _visStateUpdaters.resetMapConfigUpdater, _handleActions[_actionTypes2.default.SET_FILTER] = _visStateUpdaters.setFilterUpdater, _handleActions[_actionTypes2.default.SET_FILTER_PLOT] = _visStateUpdaters.setFilterPlotUpdater, _handleActions[_actionTypes2.default.SET_VISIBLE_LAYERS_FOR_MAP] = _visStateUpdaters.setVisibleLayersForMapUpdater, _handleActions[_actionTypes2.default.SHOW_DATASET_TABLE] = _visStateUpdaters.showDatasetTableUpdater, _handleActions[_actionTypes2.default.TOGGLE_FILTER_ANIMATION] = _visStateUpdaters.toggleFilterAnimationUpdater, _handleActions[_actionTypes2.default.UPDATE_FILTER_ANIMATION_SPEED] = _visStateUpdaters.updateAnimationSpeedUpdater, _handleActions[_actionTypes2.default.TOGGLE_LAYER_FOR_MAP] = _visStateUpdaters.toggleLayerForMapUpdater, _handleActions[_actionTypes2.default.TOGGLE_SPLIT_MAP] = _visStateUpdaters.toggleSplitMapUpdater, _handleActions[_actionTypes2.default.UPDATE_LAYER_BLENDING] = _visStateUpdaters.updateLayerBlendingUpdater, _handleActions[_actionTypes2.default.UPDATE_VIS_DATA] = _visStateUpdaters.updateVisDataUpdater, _handleActions), _visStateUpdaters.INITIAL_VIS_STATE);

exports.default = rootReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy92aXMtc3RhdGUuanMiXSwibmFtZXMiOlsicm9vdFJlZHVjZXIiLCJBRERfRklMVEVSIiwiQUREX0xBWUVSIiwiRU5MQVJHRV9GSUxURVIiLCJJTlRFUkFDVElPTl9DT05GSUdfQ0hBTkdFIiwiTEFZRVJfQ0xJQ0siLCJMQVlFUl9DT05GSUdfQ0hBTkdFIiwiTEFZRVJfSE9WRVIiLCJMQVlFUl9UWVBFX0NIQU5HRSIsIkxBWUVSX1ZJU19DT05GSUdfQ0hBTkdFIiwiTEFZRVJfVklTVUFMX0NIQU5ORUxfQ0hBTkdFIiwiTE9BRF9GSUxFUyIsIkxPQURfRklMRVNfRVJSIiwiTUFQX0NMSUNLIiwiUkVDRUlWRV9NQVBfQ09ORklHIiwiUkVNT1ZFX0RBVEFTRVQiLCJSRU1PVkVfRklMVEVSIiwiUkVNT1ZFX0xBWUVSIiwiUkVPUkRFUl9MQVlFUiIsIlJFU0VUX01BUF9DT05GSUciLCJTRVRfRklMVEVSIiwiU0VUX0ZJTFRFUl9QTE9UIiwiU0VUX1ZJU0lCTEVfTEFZRVJTX0ZPUl9NQVAiLCJTSE9XX0RBVEFTRVRfVEFCTEUiLCJUT0dHTEVfRklMVEVSX0FOSU1BVElPTiIsIlVQREFURV9GSUxURVJfQU5JTUFUSU9OX1NQRUVEIiwiVE9HR0xFX0xBWUVSX0ZPUl9NQVAiLCJUT0dHTEVfU1BMSVRfTUFQIiwiVVBEQVRFX0xBWUVSX0JMRU5ESU5HIiwiVVBEQVRFX1ZJU19EQVRBIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBOzs7QUFIQTs7OztBQUNBOztBQUdBOzs7O0FBaUNBO0FBQ0EsSUFBTUEsY0FBYyxzRUFFZixzQkFBWUMsVUFGRyx1REFJZixzQkFBWUMsU0FKRyxzREFNZixzQkFBWUMsY0FORywyREFRZixzQkFBWUMseUJBUkcscUVBVWYsc0JBQVlDLFdBVkcsd0RBWWYsc0JBQVlDLG1CQVpHLCtEQWNmLHNCQUFZQyxXQWRHLHdEQWdCZixzQkFBWUMsaUJBaEJHLDZEQWtCZixzQkFBWUMsdUJBbEJHLGtFQW9CZixzQkFBWUMsMkJBcEJHLHNFQXNCZixzQkFBWUMsVUF0QkcsdURBd0JmLHNCQUFZQyxjQXhCRywwREEwQmYsc0JBQVlDLFNBMUJHLHNEQTRCZixzQkFBWUMsa0JBNUJHLDhEQThCZixzQkFBWUMsY0E5QkcsMkRBZ0NmLHNCQUFZQyxhQWhDRywwREFrQ2Ysc0JBQVlDLFlBbENHLHlEQW9DZixzQkFBWUMsYUFwQ0csMERBc0NmLHNCQUFZQyxnQkF0Q0csNERBd0NmLHNCQUFZQyxVQXhDRyx1REEwQ2Ysc0JBQVlDLGVBMUNHLDJEQTRDZixzQkFBWUMsMEJBNUNHLG9FQThDZixzQkFBWUMsa0JBOUNHLDhEQWdEZixzQkFBWUMsdUJBaERHLG1FQWlEZixzQkFBWUMsNkJBakRHLGtFQW1EZixzQkFBWUMsb0JBbkRHLCtEQXFEZixzQkFBWUMsZ0JBckRHLDREQXVEZixzQkFBWUMscUJBdkRHLGlFQXlEZixzQkFBWUMsZUF6REcsaUdBQXBCOztrQkE4RGU3QixXIiwiZmlsZSI6InZpcy1zdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBY3Rpb25UeXBlcyBmcm9tICcuLi9jb25zdGFudHMvYWN0aW9uLXR5cGVzJztcbmltcG9ydCB7aGFuZGxlQWN0aW9uc30gZnJvbSAncmVkdXgtYWN0aW9ucyc7XG5cbi8vIHVwZGF0ZXIgZnVuY3Rpb25zXG5pbXBvcnQge1xuICBJTklUSUFMX1ZJU19TVEFURSxcbiAgYWRkRmlsdGVyVXBkYXRlcixcbiAgYWRkTGF5ZXJVcGRhdGVyLFxuICBlbmxhcmdlRmlsdGVyVXBkYXRlcixcbiAgbGF5ZXJDbGlja1VwZGF0ZXIsXG4gIGxheWVySG92ZXJVcGRhdGVyLFxuICBtYXBDbGlja1VwZGF0ZXIsXG4gIHRvZ2dsZUZpbHRlckFuaW1hdGlvblVwZGF0ZXIsXG4gIHVwZGF0ZUFuaW1hdGlvblNwZWVkVXBkYXRlcixcbiAgcmVjZWl2ZU1hcENvbmZpZ1VwZGF0ZXIsXG4gIHJlc2V0TWFwQ29uZmlnVXBkYXRlcixcbiAgbG9hZEZpbGVzVXBkYXRlcixcbiAgbG9hZEZpbGVzRXJyVXBkYXRlcixcbiAgdXBkYXRlVmlzRGF0YVVwZGF0ZXIsXG4gIHJlbW92ZURhdGFzZXRVcGRhdGVyLFxuICByZW1vdmVGaWx0ZXJVcGRhdGVyLFxuICByZW1vdmVMYXllclVwZGF0ZXIsXG4gIHJlb3JkZXJMYXllclVwZGF0ZXIsXG4gIHNob3dEYXRhc2V0VGFibGVVcGRhdGVyLFxuICBzZXRGaWx0ZXJVcGRhdGVyLFxuICBzZXRGaWx0ZXJQbG90VXBkYXRlcixcbiAgaW50ZXJhY3Rpb25Db25maWdDaGFuZ2VVcGRhdGVyLFxuICB1cGRhdGVMYXllckJsZW5kaW5nVXBkYXRlcixcbiAgbGF5ZXJDb25maWdDaGFuZ2VVcGRhdGVyLFxuICBsYXllclR5cGVDaGFuZ2VVcGRhdGVyLFxuICB0b2dnbGVTcGxpdE1hcFVwZGF0ZXIsXG4gIHNldFZpc2libGVMYXllcnNGb3JNYXBVcGRhdGVyLFxuICB0b2dnbGVMYXllckZvck1hcFVwZGF0ZXIsXG4gIGxheWVyVmlzQ29uZmlnQ2hhbmdlVXBkYXRlcixcbiAgbGF5ZXJWaXN1YWxDaGFubmVsQ2hhbmdlVXBkYXRlclxufSBmcm9tICcuL3Zpcy1zdGF0ZS11cGRhdGVycyc7XG5cbi8vIGNvbnN0cnVjdCB2aXMtc3RhdGUgcmVkdWNlclxuY29uc3Qgcm9vdFJlZHVjZXIgPSBoYW5kbGVBY3Rpb25zKFxuICB7XG4gICAgW0FjdGlvblR5cGVzLkFERF9GSUxURVJdOiBhZGRGaWx0ZXJVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLkFERF9MQVlFUl06IGFkZExheWVyVXBkYXRlcixcblxuICAgIFtBY3Rpb25UeXBlcy5FTkxBUkdFX0ZJTFRFUl06IGVubGFyZ2VGaWx0ZXJVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLklOVEVSQUNUSU9OX0NPTkZJR19DSEFOR0VdOiBpbnRlcmFjdGlvbkNvbmZpZ0NoYW5nZVVwZGF0ZXIsXG5cbiAgICBbQWN0aW9uVHlwZXMuTEFZRVJfQ0xJQ0tdOiBsYXllckNsaWNrVXBkYXRlcixcblxuICAgIFtBY3Rpb25UeXBlcy5MQVlFUl9DT05GSUdfQ0hBTkdFXTogbGF5ZXJDb25maWdDaGFuZ2VVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLkxBWUVSX0hPVkVSXTogbGF5ZXJIb3ZlclVwZGF0ZXIsXG5cbiAgICBbQWN0aW9uVHlwZXMuTEFZRVJfVFlQRV9DSEFOR0VdOiBsYXllclR5cGVDaGFuZ2VVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLkxBWUVSX1ZJU19DT05GSUdfQ0hBTkdFXTogbGF5ZXJWaXNDb25maWdDaGFuZ2VVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLkxBWUVSX1ZJU1VBTF9DSEFOTkVMX0NIQU5HRV06IGxheWVyVmlzdWFsQ2hhbm5lbENoYW5nZVVwZGF0ZXIsXG5cbiAgICBbQWN0aW9uVHlwZXMuTE9BRF9GSUxFU106IGxvYWRGaWxlc1VwZGF0ZXIsXG5cbiAgICBbQWN0aW9uVHlwZXMuTE9BRF9GSUxFU19FUlJdOiBsb2FkRmlsZXNFcnJVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLk1BUF9DTElDS106IG1hcENsaWNrVXBkYXRlcixcblxuICAgIFtBY3Rpb25UeXBlcy5SRUNFSVZFX01BUF9DT05GSUddOiByZWNlaXZlTWFwQ29uZmlnVXBkYXRlcixcblxuICAgIFtBY3Rpb25UeXBlcy5SRU1PVkVfREFUQVNFVF06IHJlbW92ZURhdGFzZXRVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLlJFTU9WRV9GSUxURVJdOiByZW1vdmVGaWx0ZXJVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLlJFTU9WRV9MQVlFUl06IHJlbW92ZUxheWVyVXBkYXRlcixcblxuICAgIFtBY3Rpb25UeXBlcy5SRU9SREVSX0xBWUVSXTogcmVvcmRlckxheWVyVXBkYXRlcixcblxuICAgIFtBY3Rpb25UeXBlcy5SRVNFVF9NQVBfQ09ORklHXTogcmVzZXRNYXBDb25maWdVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLlNFVF9GSUxURVJdOiBzZXRGaWx0ZXJVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLlNFVF9GSUxURVJfUExPVF06IHNldEZpbHRlclBsb3RVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLlNFVF9WSVNJQkxFX0xBWUVSU19GT1JfTUFQXTogc2V0VmlzaWJsZUxheWVyc0Zvck1hcFVwZGF0ZXIsXG5cbiAgICBbQWN0aW9uVHlwZXMuU0hPV19EQVRBU0VUX1RBQkxFXTogc2hvd0RhdGFzZXRUYWJsZVVwZGF0ZXIsXG5cbiAgICBbQWN0aW9uVHlwZXMuVE9HR0xFX0ZJTFRFUl9BTklNQVRJT05dOiB0b2dnbGVGaWx0ZXJBbmltYXRpb25VcGRhdGVyLFxuICAgIFtBY3Rpb25UeXBlcy5VUERBVEVfRklMVEVSX0FOSU1BVElPTl9TUEVFRF06IHVwZGF0ZUFuaW1hdGlvblNwZWVkVXBkYXRlcixcblxuICAgIFtBY3Rpb25UeXBlcy5UT0dHTEVfTEFZRVJfRk9SX01BUF06IHRvZ2dsZUxheWVyRm9yTWFwVXBkYXRlcixcblxuICAgIFtBY3Rpb25UeXBlcy5UT0dHTEVfU1BMSVRfTUFQXTogdG9nZ2xlU3BsaXRNYXBVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLlVQREFURV9MQVlFUl9CTEVORElOR106IHVwZGF0ZUxheWVyQmxlbmRpbmdVcGRhdGVyLFxuXG4gICAgW0FjdGlvblR5cGVzLlVQREFURV9WSVNfREFUQV06IHVwZGF0ZVZpc0RhdGFVcGRhdGVyXG4gIH0sXG4gIElOSVRJQUxfVklTX1NUQVRFXG4pO1xuXG5leHBvcnQgZGVmYXVsdCByb290UmVkdWNlcjtcbiJdfQ==