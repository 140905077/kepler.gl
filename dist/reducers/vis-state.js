'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _handleActions;

// updater functions


var _actionTypes = require('../constants/action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _reduxActions = require('redux-actions');

var _visStateUpdaters = require('./vis-state-updaters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// construct vis-state reducer
var rootReducer = (0, _reduxActions.handleActions)((_handleActions = {}, _handleActions[_actionTypes2.default.ADD_FILTER] = _visStateUpdaters.addFilterUpdater, _handleActions[_actionTypes2.default.ADD_LAYER] = _visStateUpdaters.addLayerUpdater, _handleActions[_actionTypes2.default.ENLARGE_FILTER] = _visStateUpdaters.enlargeFilterUpdater, _handleActions[_actionTypes2.default.INTERACTION_CONFIG_CHANGE] = _visStateUpdaters.interactionConfigChangeUpdater, _handleActions[_actionTypes2.default.LAYER_CLICK] = _visStateUpdaters.layerClickUpdater, _handleActions[_actionTypes2.default.LAYER_CONFIG_CHANGE] = _visStateUpdaters.layerConfigChangeUpdater, _handleActions[_actionTypes2.default.LAYER_HOVER] = _visStateUpdaters.layerHoverUpdater, _handleActions[_actionTypes2.default.LAYER_TYPE_CHANGE] = _visStateUpdaters.layerTypeChangeUpdater, _handleActions[_actionTypes2.default.LAYER_VIS_CONFIG_CHANGE] = _visStateUpdaters.layerVisConfigChangeUpdater, _handleActions[_actionTypes2.default.LAYER_VISUAL_CHANNEL_CHANGE] = _visStateUpdaters.layerVisualChannelChangeUpdater, _handleActions[_actionTypes2.default.LOAD_FILES] = _visStateUpdaters.loadFilesUpdater, _handleActions[_actionTypes2.default.LOAD_FILES_ERR] = _visStateUpdaters.loadFilesErrUpdater, _handleActions[_actionTypes2.default.MAP_CLICK] = _visStateUpdaters.mapClickUpdater, _handleActions[_actionTypes2.default.RECEIVE_MAP_CONFIG] = _visStateUpdaters.receiveMapConfigUpdater, _handleActions[_actionTypes2.default.REMOVE_DATASET] = _visStateUpdaters.removeDatasetUpdater, _handleActions[_actionTypes2.default.REMOVE_FILTER] = _visStateUpdaters.removeFilterUpdater, _handleActions[_actionTypes2.default.REMOVE_LAYER] = _visStateUpdaters.removeLayerUpdater, _handleActions[_actionTypes2.default.REORDER_LAYER] = _visStateUpdaters.reorderLayerUpdater, _handleActions[_actionTypes2.default.RESET_MAP_CONFIG] = _visStateUpdaters.resetMapConfigUpdater, _handleActions[_actionTypes2.default.SET_FILTER] = _visStateUpdaters.setFilterUpdater, _handleActions[_actionTypes2.default.SET_FILTER_PLOT] = _visStateUpdaters.setFilterPlotUpdater, _handleActions[_actionTypes2.default.SET_VISIBLE_LAYERS_FOR_MAP] = _visStateUpdaters.setVisibleLayersForMapUpdater, _handleActions[_actionTypes2.default.SHOW_DATASET_TABLE] = _visStateUpdaters.showDatasetTableUpdater, _handleActions[_actionTypes2.default.TOGGLE_FILTER_ANIMATION] = _visStateUpdaters.toggleFilterAnimationUpdater, _handleActions[_actionTypes2.default.TOGGLE_LAYER_FOR_MAP] = _visStateUpdaters.toggleLayerForMapUpdater, _handleActions[_actionTypes2.default.TOGGLE_SPLIT_MAP] = _visStateUpdaters.toggleSplitMapUpdater, _handleActions[_actionTypes2.default.UPDATE_LAYER_BLENDING] = _visStateUpdaters.updateLayerBlendingUpdater, _handleActions[_actionTypes2.default.UPDATE_VIS_DATA] = _visStateUpdaters.updateVisDataUpdater, _handleActions), _visStateUpdaters.INITIAL_VIS_STATE);

exports.default = rootReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy92aXMtc3RhdGUuanMiXSwibmFtZXMiOlsicm9vdFJlZHVjZXIiLCJBRERfRklMVEVSIiwiQUREX0xBWUVSIiwiRU5MQVJHRV9GSUxURVIiLCJJTlRFUkFDVElPTl9DT05GSUdfQ0hBTkdFIiwiTEFZRVJfQ0xJQ0siLCJMQVlFUl9DT05GSUdfQ0hBTkdFIiwiTEFZRVJfSE9WRVIiLCJMQVlFUl9UWVBFX0NIQU5HRSIsIkxBWUVSX1ZJU19DT05GSUdfQ0hBTkdFIiwiTEFZRVJfVklTVUFMX0NIQU5ORUxfQ0hBTkdFIiwiTE9BRF9GSUxFUyIsIkxPQURfRklMRVNfRVJSIiwiTUFQX0NMSUNLIiwiUkVDRUlWRV9NQVBfQ09ORklHIiwiUkVNT1ZFX0RBVEFTRVQiLCJSRU1PVkVfRklMVEVSIiwiUkVNT1ZFX0xBWUVSIiwiUkVPUkRFUl9MQVlFUiIsIlJFU0VUX01BUF9DT05GSUciLCJTRVRfRklMVEVSIiwiU0VUX0ZJTFRFUl9QTE9UIiwiU0VUX1ZJU0lCTEVfTEFZRVJTX0ZPUl9NQVAiLCJTSE9XX0RBVEFTRVRfVEFCTEUiLCJUT0dHTEVfRklMVEVSX0FOSU1BVElPTiIsIlRPR0dMRV9MQVlFUl9GT1JfTUFQIiwiVE9HR0xFX1NQTElUX01BUCIsIlVQREFURV9MQVlFUl9CTEVORElORyIsIlVQREFURV9WSVNfREFUQSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQTs7O0FBSEE7Ozs7QUFDQTs7QUFHQTs7OztBQWdDQTtBQUNBLElBQU1BLGNBQWMsc0VBQ2pCLHNCQUFZQyxVQURLLHVEQUdqQixzQkFBWUMsU0FISyxzREFLakIsc0JBQVlDLGNBTEssMkRBT2pCLHNCQUFZQyx5QkFQSyxxRUFTakIsc0JBQVlDLFdBVEssd0RBV2pCLHNCQUFZQyxtQkFYSywrREFhakIsc0JBQVlDLFdBYkssd0RBZWpCLHNCQUFZQyxpQkFmSyw2REFpQmpCLHNCQUFZQyx1QkFqQkssa0VBbUJqQixzQkFBWUMsMkJBbkJLLHNFQXFCakIsc0JBQVlDLFVBckJLLHVEQXVCakIsc0JBQVlDLGNBdkJLLDBEQXlCakIsc0JBQVlDLFNBekJLLHNEQTJCakIsc0JBQVlDLGtCQTNCSyw4REE2QmpCLHNCQUFZQyxjQTdCSywyREErQmpCLHNCQUFZQyxhQS9CSywwREFpQ2pCLHNCQUFZQyxZQWpDSyx5REFtQ2pCLHNCQUFZQyxhQW5DSywwREFxQ2pCLHNCQUFZQyxnQkFyQ0ssNERBdUNqQixzQkFBWUMsVUF2Q0ssdURBeUNqQixzQkFBWUMsZUF6Q0ssMkRBMkNqQixzQkFBWUMsMEJBM0NLLG9FQTZDakIsc0JBQVlDLGtCQTdDSyw4REErQ2pCLHNCQUFZQyx1QkEvQ0ssbUVBaURqQixzQkFBWUMsb0JBakRLLCtEQW1EakIsc0JBQVlDLGdCQW5ESyw0REFxRGpCLHNCQUFZQyxxQkFyREssaUVBdURqQixzQkFBWUMsZUF2REssaUdBQXBCOztrQkEyRGU1QixXIiwiZmlsZSI6InZpcy1zdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBY3Rpb25UeXBlcyBmcm9tICcuLi9jb25zdGFudHMvYWN0aW9uLXR5cGVzJztcbmltcG9ydCB7aGFuZGxlQWN0aW9uc30gZnJvbSAncmVkdXgtYWN0aW9ucyc7XG5cbi8vIHVwZGF0ZXIgZnVuY3Rpb25zXG5pbXBvcnQge1xuICBJTklUSUFMX1ZJU19TVEFURSxcbiAgYWRkRmlsdGVyVXBkYXRlcixcbiAgYWRkTGF5ZXJVcGRhdGVyLFxuICBlbmxhcmdlRmlsdGVyVXBkYXRlcixcbiAgbGF5ZXJDbGlja1VwZGF0ZXIsXG4gIGxheWVySG92ZXJVcGRhdGVyLFxuICBtYXBDbGlja1VwZGF0ZXIsXG4gIHRvZ2dsZUZpbHRlckFuaW1hdGlvblVwZGF0ZXIsXG4gIHJlY2VpdmVNYXBDb25maWdVcGRhdGVyLFxuICByZXNldE1hcENvbmZpZ1VwZGF0ZXIsXG4gIGxvYWRGaWxlc1VwZGF0ZXIsXG4gIGxvYWRGaWxlc0VyclVwZGF0ZXIsXG4gIHVwZGF0ZVZpc0RhdGFVcGRhdGVyLFxuICByZW1vdmVEYXRhc2V0VXBkYXRlcixcbiAgcmVtb3ZlRmlsdGVyVXBkYXRlcixcbiAgcmVtb3ZlTGF5ZXJVcGRhdGVyLFxuICByZW9yZGVyTGF5ZXJVcGRhdGVyLFxuICBzaG93RGF0YXNldFRhYmxlVXBkYXRlcixcbiAgc2V0RmlsdGVyVXBkYXRlcixcbiAgc2V0RmlsdGVyUGxvdFVwZGF0ZXIsXG4gIGludGVyYWN0aW9uQ29uZmlnQ2hhbmdlVXBkYXRlcixcbiAgdXBkYXRlTGF5ZXJCbGVuZGluZ1VwZGF0ZXIsXG4gIGxheWVyQ29uZmlnQ2hhbmdlVXBkYXRlcixcbiAgbGF5ZXJUeXBlQ2hhbmdlVXBkYXRlcixcbiAgdG9nZ2xlU3BsaXRNYXBVcGRhdGVyLFxuICBzZXRWaXNpYmxlTGF5ZXJzRm9yTWFwVXBkYXRlcixcbiAgdG9nZ2xlTGF5ZXJGb3JNYXBVcGRhdGVyLFxuICBsYXllclZpc0NvbmZpZ0NoYW5nZVVwZGF0ZXIsXG4gIGxheWVyVmlzdWFsQ2hhbm5lbENoYW5nZVVwZGF0ZXJcbn0gZnJvbSAnLi92aXMtc3RhdGUtdXBkYXRlcnMnO1xuXG4vLyBjb25zdHJ1Y3QgdmlzLXN0YXRlIHJlZHVjZXJcbmNvbnN0IHJvb3RSZWR1Y2VyID0gaGFuZGxlQWN0aW9ucyh7XG4gIFtBY3Rpb25UeXBlcy5BRERfRklMVEVSXTogYWRkRmlsdGVyVXBkYXRlcixcblxuICBbQWN0aW9uVHlwZXMuQUREX0xBWUVSXTogYWRkTGF5ZXJVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5FTkxBUkdFX0ZJTFRFUl06IGVubGFyZ2VGaWx0ZXJVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5JTlRFUkFDVElPTl9DT05GSUdfQ0hBTkdFXTogaW50ZXJhY3Rpb25Db25maWdDaGFuZ2VVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5MQVlFUl9DTElDS106IGxheWVyQ2xpY2tVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5MQVlFUl9DT05GSUdfQ0hBTkdFXTogbGF5ZXJDb25maWdDaGFuZ2VVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5MQVlFUl9IT1ZFUl06IGxheWVySG92ZXJVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5MQVlFUl9UWVBFX0NIQU5HRV06IGxheWVyVHlwZUNoYW5nZVVwZGF0ZXIsXG5cbiAgW0FjdGlvblR5cGVzLkxBWUVSX1ZJU19DT05GSUdfQ0hBTkdFXTogbGF5ZXJWaXNDb25maWdDaGFuZ2VVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5MQVlFUl9WSVNVQUxfQ0hBTk5FTF9DSEFOR0VdOiBsYXllclZpc3VhbENoYW5uZWxDaGFuZ2VVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5MT0FEX0ZJTEVTXTogbG9hZEZpbGVzVXBkYXRlcixcblxuICBbQWN0aW9uVHlwZXMuTE9BRF9GSUxFU19FUlJdOiBsb2FkRmlsZXNFcnJVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5NQVBfQ0xJQ0tdOiBtYXBDbGlja1VwZGF0ZXIsXG5cbiAgW0FjdGlvblR5cGVzLlJFQ0VJVkVfTUFQX0NPTkZJR106IHJlY2VpdmVNYXBDb25maWdVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5SRU1PVkVfREFUQVNFVF06IHJlbW92ZURhdGFzZXRVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5SRU1PVkVfRklMVEVSXTogcmVtb3ZlRmlsdGVyVXBkYXRlcixcblxuICBbQWN0aW9uVHlwZXMuUkVNT1ZFX0xBWUVSXTogcmVtb3ZlTGF5ZXJVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5SRU9SREVSX0xBWUVSXTogcmVvcmRlckxheWVyVXBkYXRlcixcblxuICBbQWN0aW9uVHlwZXMuUkVTRVRfTUFQX0NPTkZJR106IHJlc2V0TWFwQ29uZmlnVXBkYXRlcixcblxuICBbQWN0aW9uVHlwZXMuU0VUX0ZJTFRFUl06IHNldEZpbHRlclVwZGF0ZXIsXG5cbiAgW0FjdGlvblR5cGVzLlNFVF9GSUxURVJfUExPVF06IHNldEZpbHRlclBsb3RVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5TRVRfVklTSUJMRV9MQVlFUlNfRk9SX01BUF06IHNldFZpc2libGVMYXllcnNGb3JNYXBVcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5TSE9XX0RBVEFTRVRfVEFCTEVdOiBzaG93RGF0YXNldFRhYmxlVXBkYXRlcixcblxuICBbQWN0aW9uVHlwZXMuVE9HR0xFX0ZJTFRFUl9BTklNQVRJT05dOiB0b2dnbGVGaWx0ZXJBbmltYXRpb25VcGRhdGVyLFxuXG4gIFtBY3Rpb25UeXBlcy5UT0dHTEVfTEFZRVJfRk9SX01BUF06IHRvZ2dsZUxheWVyRm9yTWFwVXBkYXRlcixcblxuICBbQWN0aW9uVHlwZXMuVE9HR0xFX1NQTElUX01BUF06IHRvZ2dsZVNwbGl0TWFwVXBkYXRlcixcblxuICBbQWN0aW9uVHlwZXMuVVBEQVRFX0xBWUVSX0JMRU5ESU5HXTogdXBkYXRlTGF5ZXJCbGVuZGluZ1VwZGF0ZXIsXG5cbiAgW0FjdGlvblR5cGVzLlVQREFURV9WSVNfREFUQV06IHVwZGF0ZVZpc0RhdGFVcGRhdGVyXG5cbn0sIElOSVRJQUxfVklTX1NUQVRFKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdFJlZHVjZXI7XG4iXX0=