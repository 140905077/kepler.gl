'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _handleActions;

var _reduxActions = require('redux-actions');

var _reactPalm = require('react-palm');

var _actionTypes = require('../constants/action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _mapzenUtils = require('../utils/mapzen-utils');

var _buildingDataActions = require('../actions/building-data-actions');

var _tasks = require('../tasks/tasks');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LOAD_BUILDING_TILE = _actionTypes2.default.LOAD_BUILDING_TILE,
    LOAD_BUILDING_TILE_START = _actionTypes2.default.LOAD_BUILDING_TILE_START,
    LOAD_BUILDING_TILE_SUCCESS = _actionTypes2.default.LOAD_BUILDING_TILE_SUCCESS,
    LOAD_BUILDING_TILE_ERROR = _actionTypes2.default.LOAD_BUILDING_TILE_ERROR,
    UPDATE_BUILDING_TILES = _actionTypes2.default.UPDATE_BUILDING_TILES,
    INIT = _actionTypes2.default.INIT;

/**
 * Get building polygons
 * @param loaded
 * @returns {Array}
 */

function getBuildingData(loaded) {
  var buildingData = [];

  for (var l = 0; l < loaded.length; l++) {
    var tile = loaded[l];

    if (tile.features.length) {
      // create one layer per tile
      // using id to signify unique layers
      // if layer id is the same and data shallow equals
      // deck.gl will not update that layer
      buildingData.push({
        tileId: tile.x + '-' + tile.y + '-' + tile.z,
        data: tile.features
      });
    }
  }
  return buildingData;
}

var onUpdateBuildingTiles = function onUpdateBuildingTiles(state, _ref) {
  var payload = _ref.payload;
  return (0, _extends3.default)({}, state, payload, {
    buildingData: getBuildingData(payload.loaded),
    loadProgress: state.tiles.size ? payload.loaded.length / state.tiles.size : 1
  });
};

/*
* load building data into view
*/
var onLoadBuildingTile = function onLoadBuildingTile(state, action) {
  var mapState = action.payload;
  var tiles = state.tiles;

  var newTiles = new _mapzenUtils.TilesCollection(mapState);

  if (tiles.size === 0 && newTiles.size === 0 || tiles.contains(newTiles)) {
    // no need to load new tiles
    return state;
  }

  var loaded = [];
  var toLoad = [];
  var cache = state.cache;

  newTiles.tiles.forEach(function (_ref2) {
    var x = _ref2.x,
        y = _ref2.y,
        z = _ref2.z;

    if (cache.has(x, y, z)) {
      var data = cache.get(x, y, z);
      if (data.features) {
        loaded.push(data);
      }
    } else {
      // required tile not in cache, pull from API
      cache = cache.set(x, y, z, { x: x, y: y, z: z });
      toLoad.push({ x: x, y: y, z: z });
    }
  });

  var newState = (0, _extends3.default)({}, state, { cache: cache, tiles: newTiles });

  if (loaded.length) {
    newState = onUpdateBuildingTiles(newState, { payload: { loaded: loaded } });
  }

  return toLoad.length ? (0, _reactPalm.withTask)(newState, toLoad.map(function (_ref3) {
    var x = _ref3.x,
        y = _ref3.y,
        z = _ref3.z;
    return (0, _tasks.LOAD_BUILDING_TILE_TASK)({ x: x, y: y, z: z }).bimap(function (result) {
      return (0, _buildingDataActions.loadBuildingTileSuccess)({ x: x, y: y, z: z, result: result });
    }, function (error) {
      return (0, _buildingDataActions.loadBuildingTileError)(error);
    });
  })) : newState;
};

var onInitiateCache = function onInitiateCache(state) {
  return (0, _extends3.default)({}, state, {
    cache: new _mapzenUtils.TilesCache(),
    tiles: new _mapzenUtils.TilesCollection()
  });
};

var onLoadBuildingTileStart = function onLoadBuildingTileStart(state, _ref4) {
  var _ref4$payload = _ref4.payload,
      x = _ref4$payload.x,
      y = _ref4$payload.y,
      z = _ref4$payload.z;
  return (0, _extends3.default)({}, state, {
    cache: state.cache.set(x, y, z, { x: x, y: y, z: z })
  });
};

var onLoadBuildingTileSuccess = function onLoadBuildingTileSuccess(state, _ref5) {
  var _ref5$payload = _ref5.payload,
      x = _ref5$payload.x,
      y = _ref5$payload.y,
      z = _ref5$payload.z,
      result = _ref5$payload.result;

  if (!result) {
    return state;
  }

  var data = { x: x, y: y, z: z, features: result };

  var newState = state;
  if (state.tiles.contains(x, y, z)) {
    newState = onUpdateBuildingTiles(state, {
      payload: { loaded: [].concat(state.loaded, [data]) }
    });
  }

  return (0, _extends3.default)({}, newState, {
    cache: newState.cache.set(x, y, z, data)
  });
};

var onLoadBuildingTileError = function onLoadBuildingTileError(state, _ref6) {
  var error = _ref6.payload;
  return (0, _extends3.default)({}, state, {
    error: error
  });
};

var buildingDataReducer = (0, _reduxActions.handleActions)((_handleActions = {}, _handleActions[LOAD_BUILDING_TILE] = onLoadBuildingTile, _handleActions[LOAD_BUILDING_TILE_START] = onLoadBuildingTileStart, _handleActions[LOAD_BUILDING_TILE_SUCCESS] = onLoadBuildingTileSuccess, _handleActions[LOAD_BUILDING_TILE_ERROR] = onLoadBuildingTileError, _handleActions[UPDATE_BUILDING_TILES] = onUpdateBuildingTiles, _handleActions[INIT] = onInitiateCache, _handleActions), {
  cache: {},
  tiles: {},
  loaded: [],
  error: null,
  buildingData: [],
  loadProgress: 0
});

exports.default = buildingDataReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9idWlsZGluZy1kYXRhLmpzIl0sIm5hbWVzIjpbIkxPQURfQlVJTERJTkdfVElMRSIsIkxPQURfQlVJTERJTkdfVElMRV9TVEFSVCIsIkxPQURfQlVJTERJTkdfVElMRV9TVUNDRVNTIiwiTE9BRF9CVUlMRElOR19USUxFX0VSUk9SIiwiVVBEQVRFX0JVSUxESU5HX1RJTEVTIiwiSU5JVCIsImdldEJ1aWxkaW5nRGF0YSIsImxvYWRlZCIsImJ1aWxkaW5nRGF0YSIsImwiLCJsZW5ndGgiLCJ0aWxlIiwiZmVhdHVyZXMiLCJwdXNoIiwidGlsZUlkIiwieCIsInkiLCJ6IiwiZGF0YSIsIm9uVXBkYXRlQnVpbGRpbmdUaWxlcyIsInN0YXRlIiwicGF5bG9hZCIsImxvYWRQcm9ncmVzcyIsInRpbGVzIiwic2l6ZSIsIm9uTG9hZEJ1aWxkaW5nVGlsZSIsImFjdGlvbiIsIm1hcFN0YXRlIiwibmV3VGlsZXMiLCJjb250YWlucyIsInRvTG9hZCIsImNhY2hlIiwiZm9yRWFjaCIsImhhcyIsImdldCIsInNldCIsIm5ld1N0YXRlIiwibWFwIiwiYmltYXAiLCJyZXN1bHQiLCJlcnJvciIsIm9uSW5pdGlhdGVDYWNoZSIsIm9uTG9hZEJ1aWxkaW5nVGlsZVN0YXJ0Iiwib25Mb2FkQnVpbGRpbmdUaWxlU3VjY2VzcyIsIm9uTG9hZEJ1aWxkaW5nVGlsZUVycm9yIiwiYnVpbGRpbmdEYXRhUmVkdWNlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7QUFJQTs7OztJQUdFQSxrQix5QkFBQUEsa0I7SUFDQUMsd0IseUJBQUFBLHdCO0lBQ0FDLDBCLHlCQUFBQSwwQjtJQUNBQyx3Qix5QkFBQUEsd0I7SUFDQUMscUIseUJBQUFBLHFCO0lBQ0FDLEkseUJBQUFBLEk7O0FBR0Y7Ozs7OztBQUtBLFNBQVNDLGVBQVQsQ0FBeUJDLE1BQXpCLEVBQWlDO0FBQy9CLE1BQU1DLGVBQWUsRUFB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ZGluZy1kYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtoYW5kbGVBY3Rpb25zfSBmcm9tICdyZWR1eC1hY3Rpb25zJztcbmltcG9ydCB7d2l0aFRhc2t9IGZyb20gJ3JlYWN0LXBhbG0nO1xuXG5pbXBvcnQgQWN0aW9uVHlwZXMgZnJvbSAnLi4vY29uc3RhbnRzL2FjdGlvbi10eXBlcyc7XG5pbXBvcnQge1RpbGVzQ2FjaGUsIFRpbGVzQ29sbGVjdGlvbn0gZnJvbSAnLi4vdXRpbHMvbWFwemVuLXV0aWxzJztcbmltcG9ydCB7XG4gIGxvYWRCdWlsZGluZ1RpbGVFcnJvcixcbiAgbG9hZEJ1aWxkaW5nVGlsZVN1Y2Nlc3Ncbn0gZnJvbSAnLi4vYWN0aW9ucy9idWlsZGluZy1kYXRhLWFjdGlvbnMnO1xuaW1wb3J0IHtMT0FEX0JVSUxESU5HX1RJTEVfVEFTS30gZnJvbSAnLi4vdGFza3MvdGFza3MnO1xuXG5jb25zdCB7XG4gIExPQURfQlVJTERJTkdfVElMRSxcbiAgTE9BRF9CVUlMRElOR19USUxFX1NUQVJULFxuICBMT0FEX0JVSUxESU5HX1RJTEVfU1VDQ0VTUyxcbiAgTE9BRF9CVUlMRElOR19USUxFX0VSUk9SLFxuICBVUERBVEVfQlVJTERJTkdfVElMRVMsXG4gIElOSVRcbn0gPSBBY3Rpb25UeXBlcztcblxuLyoqXG4gKiBHZXQgYnVpbGRpbmcgcG9seWdvbnNcbiAqIEBwYXJhbSBsb2FkZWRcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gZ2V0QnVpbGRpbmdEYXRhKGxvYWRlZCkge1xuICBjb25zdCBidWlsZGluZ0RhdGEgPSBbXTtcblxuICBmb3IgKGxldCBsID0gMDsgbCA8IGxvYWRlZC5sZW5ndGg7IGwrKykge1xuICAgIGNvbnN0IHRpbGUgPSBsb2FkZWRbbF07XG5cbiAgICBpZiAodGlsZS5mZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgIC8vIGNyZWF0ZSBvbmUgbGF5ZXIgcGVyIHRpbGVcbiAgICAgIC8vIHVzaW5nIGlkIHRvIHNpZ25pZnkgdW5pcXVlIGxheWVyc1xuICAgICAgLy8gaWYgbGF5ZXIgaWQgaXMgdGhlIHNhbWUgYW5kIGRhdGEgc2hhbGxvdyBlcXVhbHNcbiAgICAgIC8vIGRlY2suZ2wgd2lsbCBub3QgdXBkYXRlIHRoYXQgbGF5ZXJcbiAgICAgIGJ1aWxkaW5nRGF0YS5wdXNoKHtcbiAgICAgICAgdGlsZUlkOiBgJHt0aWxlLnh9LSR7dGlsZS55fS0ke3RpbGUuen1gLFxuICAgICAgICBkYXRhOiB0aWxlLmZlYXR1cmVzXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ1aWxkaW5nRGF0YTtcbn1cblxuY29uc3Qgb25VcGRhdGVCdWlsZGluZ1RpbGVzID0gKHN0YXRlLCB7cGF5bG9hZH0pID0+ICh7XG4gIC4uLnN0YXRlLFxuICAuLi5wYXlsb2FkLFxuICBidWlsZGluZ0RhdGE6IGdldEJ1aWxkaW5nRGF0YShwYXlsb2FkLmxvYWRlZCksXG4gIGxvYWRQcm9ncmVzczogc3RhdGUudGlsZXMuc2l6ZSA/IHBheWxvYWQubG9hZGVkLmxlbmd0aCAvIHN0YXRlLnRpbGVzLnNpemUgOiAxXG59KTtcblxuLypcbiogbG9hZCBidWlsZGluZyBkYXRhIGludG8gdmlld1xuKi9cbmNvbnN0IG9uTG9hZEJ1aWxkaW5nVGlsZSA9IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIGNvbnN0IG1hcFN0YXRlID0gYWN0aW9uLnBheWxvYWQ7XG4gIGNvbnN0IHt0aWxlc30gPSBzdGF0ZTtcbiAgY29uc3QgbmV3VGlsZXMgPSBuZXcgVGlsZXNDb2xsZWN0aW9uKG1hcFN0YXRlKTtcblxuICBpZiAoKHRpbGVzLnNpemUgPT09IDAgJiYgbmV3VGlsZXMuc2l6ZSA9PT0gMCkgfHwgdGlsZXMuY29udGFpbnMobmV3VGlsZXMpKSB7XG4gICAgLy8gbm8gbmVlZCB0byBsb2FkIG5ldyB0aWxlc1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGNvbnN0IGxvYWRlZCA9IFtdO1xuICBjb25zdCB0b0xvYWQgPSBbXTtcbiAgbGV0IGNhY2hlID0gc3RhdGUuY2FjaGU7XG5cbiAgbmV3VGlsZXMudGlsZXMuZm9yRWFjaCgoe3gsIHksIHp9KSA9PiB7XG4gICAgaWYgKGNhY2hlLmhhcyh4LCB5LCB6KSkge1xuICAgICAgY29uc3QgZGF0YSA9IGNhY2hlLmdldCh4LCB5LCB6KTtcbiAgICAgIGlmIChkYXRhLmZlYXR1cmVzKSB7XG4gICAgICAgIGxvYWRlZC5wdXNoKGRhdGEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXF1aXJlZCB0aWxlIG5vdCBpbiBjYWNoZSwgcHVsbCBmcm9tIEFQSVxuICAgICAgY2FjaGUgPSBjYWNoZS5zZXQoeCwgeSwgeiwge3gsIHksIHp9KTtcbiAgICAgIHRvTG9hZC5wdXNoKHt4LCB5LCB6fSk7XG4gICAgfVxuICB9KTtcblxuICBsZXQgbmV3U3RhdGUgPSB7Li4uc3RhdGUsIGNhY2hlLCB0aWxlczogbmV3VGlsZXN9O1xuXG4gIGlmIChsb2FkZWQubGVuZ3RoKSB7XG4gICAgbmV3U3RhdGUgPSBvblVwZGF0ZUJ1aWxkaW5nVGlsZXMobmV3U3RhdGUsIHtwYXlsb2FkOiB7bG9hZGVkfX0pO1xuICB9XG5cbiAgcmV0dXJuIHRvTG9hZC5sZW5ndGhcbiAgICA/IHdpdGhUYXNrKFxuICAgICAgICBuZXdTdGF0ZSxcbiAgICAgICAgdG9Mb2FkLm1hcCgoe3gsIHksIHp9KSA9PlxuICAgICAgICAgIExPQURfQlVJTERJTkdfVElMRV9UQVNLKHt4LCB5LCB6fSkuYmltYXAoXG4gICAgICAgICAgICByZXN1bHQgPT4gbG9hZEJ1aWxkaW5nVGlsZVN1Y2Nlc3Moe3gsIHksIHosIHJlc3VsdH0pLFxuICAgICAgICAgICAgZXJyb3IgPT4gbG9hZEJ1aWxkaW5nVGlsZUVycm9yKGVycm9yKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICAgIDogbmV3U3RhdGU7XG59O1xuXG5jb25zdCBvbkluaXRpYXRlQ2FjaGUgPSBzdGF0ZSA9PiAoe1xuICAuLi5zdGF0ZSxcbiAgY2FjaGU6IG5ldyBUaWxlc0NhY2hlKCksXG4gIHRpbGVzOiBuZXcgVGlsZXNDb2xsZWN0aW9uKClcbn0pO1xuXG5jb25zdCBvbkxvYWRCdWlsZGluZ1RpbGVTdGFydCA9IChzdGF0ZSwge3BheWxvYWQ6IHt4LCB5LCB6fX0pID0+ICh7XG4gIC4uLnN0YXRlLFxuICBjYWNoZTogc3RhdGUuY2FjaGUuc2V0KHgsIHksIHosIHt4LCB5LCB6fSlcbn0pO1xuXG5jb25zdCBvbkxvYWRCdWlsZGluZ1RpbGVTdWNjZXNzID0gKHN0YXRlLCB7cGF5bG9hZDoge3gsIHksIHosIHJlc3VsdH19KSA9PiB7XG4gIGlmICghcmVzdWx0KSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IHt4LCB5LCB6LCBmZWF0dXJlczogcmVzdWx0fTtcblxuICBsZXQgbmV3U3RhdGUgPSBzdGF0ZTtcbiAgaWYgKHN0YXRlLnRpbGVzLmNvbnRhaW5zKHgsIHksIHopKSB7XG4gICAgbmV3U3RhdGUgPSBvblVwZGF0ZUJ1aWxkaW5nVGlsZXMoc3RhdGUsIHtcbiAgICAgIHBheWxvYWQ6IHtsb2FkZWQ6IFsuLi5zdGF0ZS5sb2FkZWQsIGRhdGFdfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5uZXdTdGF0ZSxcbiAgICBjYWNoZTogbmV3U3RhdGUuY2FjaGUuc2V0KHgsIHksIHosIGRhdGEpXG4gIH07XG59O1xuXG5jb25zdCBvbkxvYWRCdWlsZGluZ1RpbGVFcnJvciA9IChzdGF0ZSwge3BheWxvYWQ6IGVycm9yfSkgPT4gKHtcbiAgLi4uc3RhdGUsXG4gIGVycm9yXG59KTtcblxuY29uc3QgYnVpbGRpbmdEYXRhUmVkdWNlciA9IGhhbmRsZUFjdGlvbnMoXG4gIHtcbiAgICBbTE9BRF9CVUlMRElOR19USUxFXTogb25Mb2FkQnVpbGRpbmdUaWxlLFxuICAgIFtMT0FEX0JVSUxESU5HX1RJTEVfU1RBUlRdOiBvbkxvYWRCdWlsZGluZ1RpbGVTdGFydCxcbiAgICBbTE9BRF9CVUlMRElOR19USUxFX1NVQ0NFU1NdOiBvbkxvYWRCdWlsZGluZ1RpbGVTdWNjZXNzLFxuICAgIFtMT0FEX0JVSUxESU5HX1RJTEVfRVJST1JdOiBvbkxvYWRCdWlsZGluZ1RpbGVFcnJvcixcbiAgICBbVVBEQVRFX0JVSUxESU5HX1RJTEVTXTogb25VcGRhdGVCdWlsZGluZ1RpbGVzLFxuICAgIFtJTklUXTogb25Jbml0aWF0ZUNhY2hlXG4gIH0sXG4gIHtcbiAgICBjYWNoZToge30sXG4gICAgdGlsZXM6IHt9LFxuICAgIGxvYWRlZDogW10sXG4gICAgZXJyb3I6IG51bGwsXG4gICAgYnVpbGRpbmdEYXRhOiBbXSxcbiAgICBsb2FkUHJvZ3Jlc3M6IDBcbiAgfVxuKTtcblxuZXhwb3J0IGRlZmF1bHQgYnVpbGRpbmdEYXRhUmVkdWNlcjtcbiJdfQ==