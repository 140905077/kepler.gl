'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.receiveMapConfigUpdater = exports.loadMapStyleErrUpdater = exports.loadMapStylesUpdater = exports.mapBuildingChangeUpdater = exports.mapStyleChangeUpdater = exports.mapConfigChangeUpdater = undefined;

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _d3Color = require('d3-color');

var _mapboxGlStyleEditor = require('../utils/map-style-utils/mapbox-gl-style-editor');

var _defaultSettings = require('../constants/default-settings');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create two map styles from preset map style, one for top map one for bottom
 *
 * @param {string} styleType - current map style
 * @param {object} visibleLayerGroups - visible layers of bottom map
 * @param {object} topLayerGroups - visible layers of top map
 * @param {object} mapStyles - a dictionary of all map styles
 * @returns {object} bottomMapStyle | topMapStyle | isRaster
 */


// Utils
function getMapStyles(_ref) {
  var styleType = _ref.styleType,
      visibleLayerGroups = _ref.visibleLayerGroups,
      topLayerGroups = _ref.topLayerGroups,
      mapStyles = _ref.mapStyles;

  var mapStyle = mapStyles[styleType] && mapStyles[styleType];
  if (!mapStyle.style) {
    return {};
  }

  var editable = Object.keys(visibleLayerGroups).length;

  var bottomMapStyle = !editable ? _immutable2.default.fromJS(mapStyle.style) : (0, _mapboxGlStyleEditor.editBottomMapStyle)({
    id: styleType,
    mapStyle: mapStyle,
    visibleLayerGroups: visibleLayerGroups
  });

  var hasTopLayer = editable && Object.values(topLayerGroups).some(function (v) {
    return v;
  });

  // mute top layer if not visible in bottom layer
  var topLayers = hasTopLayer && Object.keys(topLayerGroups).reduce(function (accu, key) {
    var _extends2;

    return (0, _extends4.default)({}, accu, (_extends2 = {}, _extends2[key] = topLayerGroups[key] && visibleLayerGroups[key], _extends2));
  }, {});

  var topMapStyle = hasTopLayer ? (0, _mapboxGlStyleEditor.editTopMapStyle)({
    id: styleType,
    mapStyle: mapStyle,
    visibleLayerGroups: topLayers
  }) : null;

  return { bottomMapStyle: bottomMapStyle, topMapStyle: topMapStyle, editable: editable };
}

function getBuildingColor(style) {
  var bldgFillLayer = (style.style.layers || []).find(function (_ref2) {
    var id = _ref2.id;
    return id === 'building-fill';
  });

  var buildingColor = bldgFillLayer ? bldgFillLayer.paint['fill-color'] : _defaultSettings.DEFAULT_BLDG_COLOR;

  // brighten or darken building based on style
  var operation = style.id.match(/(?=(dark|night))/) ? 'brighter' : 'darker';
  var adjusted = (0, _d3Color.rgb)(buildingColor)[operation](0.2);

  return [adjusted.r, adjusted.g, adjusted.b];
}

// Updaters
var mapConfigChangeUpdater = exports.mapConfigChangeUpdater = function mapConfigChangeUpdater(state, action) {
  return (0, _extends4.default)({}, state, action.payload, getMapStyles((0, _extends4.default)({}, state, action.payload)));
};

var mapStyleChangeUpdater = exports.mapStyleChangeUpdater = function mapStyleChangeUpdater(state, _ref3) {
  var styleType = _ref3.payload;

  var visibleLayerGroups = (0, _mapboxGlStyleEditor.getDefaultLayerGroupVisibility)(state.mapStyles[styleType]);

  return (0, _extends4.default)({}, state, {
    styleType: styleType,
    visibleLayerGroups: visibleLayerGroups
  }, getMapStyles((0, _extends4.default)({}, state, {
    visibleLayerGroups: visibleLayerGroups,
    styleType: styleType
  })), {
    buildingLayer: (0, _extends4.default)({}, state.buildingLayer, {
      color: state.mapStyles[styleType].buildingColor
    })
  });
};

var mapBuildingChangeUpdater = exports.mapBuildingChangeUpdater = function mapBuildingChangeUpdater(state, _ref4) {
  var payload = _ref4.payload;
  return (0, _extends4.default)({}, state, {
    buildingLayer: (0, _extends4.default)({}, state.buildingLayer, payload)
  });
};

var loadMapStylesUpdater = exports.loadMapStylesUpdater = function loadMapStylesUpdater(state, action) {
  var newStyles = action.payload;
  Object.keys(newStyles).forEach(function (key) {
    var style = newStyles[key];

    // get building color
    newStyles[key] = (0, _extends4.default)({}, style, {
      buildingColor: getBuildingColor(style)
    });
  });

  // add new styles to state
  var newState = (0, _extends4.default)({}, state, {
    mapStyles: (0, _extends4.default)({}, state.mapStyles, newStyles)
  });

  return newStyles[state.styleType] ? mapStyleChangeUpdater(newState, { payload: state.styleType }) : newState;
};

// do nothing for now, if didn't load, skip it
var loadMapStyleErrUpdater = exports.loadMapStyleErrUpdater = function loadMapStyleErrUpdater(state, action) {
  return state;
};
var receiveMapConfigUpdater = exports.receiveMapConfigUpdater = function receiveMapConfigUpdater(state, action) {
  return action.payload.mapStyle ? mapConfigChangeUpdater(state, { payload: action.payload.mapStyle }) : state;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,