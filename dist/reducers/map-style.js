'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INITIAL_MAP_STYLE = undefined;

var _handleActions;

// Actions


// Constants


var _reduxActions = require('redux-actions');

var _actionTypes = require('../constants/action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _mapStyleUpdaters = require('./map-style-updaters');

var _colorUtils = require('../utils/color-utils');

var _defaultSettings = require('../constants/default-settings');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// bedrock browserInit flattens our immutable object into a plain object
// we have to recreate the state after the app is loaded
var getDefaultState = function getDefaultState() {
  var visibleLayerGroups = {};
  var styleType = _defaultSettings.INITIAL_STYLE_TYPE;
  var topLayerGroups = {};

  return {
    styleType: styleType,
    visibleLayerGroups: visibleLayerGroups,
    topLayerGroups: topLayerGroups,
    mapStyles: {},
    buildingLayer: {
      isVisible: false,
      color: (0, _colorUtils.hexToRgb)(_defaultSettings.DEFAULT_BLDG_COLOR),
      opacity: 0.7
    }
  };
};

var INITIAL_MAP_STYLE = exports.INITIAL_MAP_STYLE = getDefaultState();

var mapStyleReducer = (0, _reduxActions.handleActions)((_handleActions = {}, _handleActions[_actionTypes2.default.MAP_CONFIG_CHANGE] = _mapStyleUpdaters.mapConfigChangeUpdater, _handleActions[_actionTypes2.default.MAP_STYLE_CHANGE] = _mapStyleUpdaters.mapStyleChangeUpdater, _handleActions[_actionTypes2.default.MAP_BUILDING_CHANGE] = _mapStyleUpdaters.mapBuildingChangeUpdater, _handleActions[_actionTypes2.default.LOAD_MAP_STYLES] = _mapStyleUpdaters.loadMapStylesUpdater, _handleActions[_actionTypes2.default.LOAD_MAP_STYLE_ERR] = _mapStyleUpdaters.loadMapStyleErrUpdater, _handleActions[_actionTypes2.default.RECEIVE_MAP_CONFIG] = _mapStyleUpdaters.receiveMapConfigUpdater, _handleActions), INITIAL_MAP_STYLE);

exports.default = mapStyleReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9tYXAtc3R5bGUuanMiXSwibmFtZXMiOlsiZ2V0RGVmYXVsdFN0YXRlIiwidmlzaWJsZUxheWVyR3JvdXBzIiwic3R5bGVUeXBlIiwidG9wTGF5ZXJHcm91cHMiLCJtYXBTdHlsZXMiLCJidWlsZGluZ0xheWVyIiwiaXNWaXNpYmxlIiwiY29sb3IiLCJvcGFjaXR5IiwiSU5JVElBTF9NQVBfU1RZTEUiLCJtYXBTdHlsZVJlZHVjZXIiLCJNQVBfQ09ORklHX0NIQU5HRSIsIk1BUF9TVFlMRV9DSEFOR0UiLCJNQVBfQlVJTERJTkdfQ0hBTkdFIiwiTE9BRF9NQVBfU1RZTEVTIiwiTE9BRF9NQVBfU1RZTEVfRVJSIiwiUkVDRUlWRV9NQVBfQ09ORklHIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQTs7O0FBYUE7OztBQWZBOztBQUdBOzs7O0FBRUE7O0FBUUE7O0FBR0E7Ozs7QUFFQTtBQUNBO0FBQ0EsSUFBTUEsa0JBQWtCLFNBQWxCQSxlQUFrQixHQUFNO0FBQzVCLE1BQU1DLHFCQUFxQixFQUEzQjtBQUNBLE1BQU1DLCtDQUFOO0FBQ0EsTUFBTUMsaUJBQWlCLEVBQXZCOztBQUVBLFNBQU87QUFDTEQsd0JBREs7QUFFTEQsMENBRks7QUFHTEUsa0NBSEs7QUFJTEMsZUFBVyxFQUpOO0FBS0xDLG1CQUFlO0FBQ2JDLGlCQUFXLEtBREU7QUFFYkMsYUFBTyw4REFGTTtBQUdiQyxlQUFTO0FBSEk7QUFMVixHQUFQO0FBV0QsQ0FoQkQ7O0FBa0JPLElBQU1DLGdEQUFvQlQsaUJBQTFCOztBQUVQLElBQU1VLGtCQUFrQixzRUFDckIsc0JBQVlDLGlCQURTLDZEQUVyQixzQkFBWUMsZ0JBRlMsNERBR3JCLHNCQUFZQyxtQkFIUywrREFJckIsc0JBQVlDLGVBSlMsMkRBS3JCLHNCQUFZQyxrQkFMUyw2REFNckIsc0JBQVlDLGtCQU5TLGdFQU9yQlAsaUJBUHFCLENBQXhCOztrQkFTZUMsZSIsImZpbGUiOiJtYXAtc3R5bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2hhbmRsZUFjdGlvbnN9IGZyb20gJ3JlZHV4LWFjdGlvbnMnO1xuXG4vLyBBY3Rpb25zXG5pbXBvcnQgQWN0aW9uVHlwZXMgZnJvbSAnY29uc3RhbnRzL2FjdGlvbi10eXBlcyc7XG5cbmltcG9ydCB7XG4gIG1hcENvbmZpZ0NoYW5nZVVwZGF0ZXIsXG4gIG1hcFN0eWxlQ2hhbmdlVXBkYXRlcixcbiAgbWFwQnVpbGRpbmdDaGFuZ2VVcGRhdGVyLFxuICBsb2FkTWFwU3R5bGVzVXBkYXRlcixcbiAgbG9hZE1hcFN0eWxlRXJyVXBkYXRlcixcbiAgcmVjZWl2ZU1hcENvbmZpZ1VwZGF0ZXJcbn0gZnJvbSAnLi9tYXAtc3R5bGUtdXBkYXRlcnMnO1xuaW1wb3J0IHtoZXhUb1JnYn0gZnJvbSBcInV0aWxzL2NvbG9yLXV0aWxzXCI7XG5cbi8vIENvbnN0YW50c1xuaW1wb3J0IHtJTklUSUFMX1NUWUxFX1RZUEUsIERFRkFVTFRfQkxER19DT0xPUn0gZnJvbSAnY29uc3RhbnRzL2RlZmF1bHQtc2V0dGluZ3MnO1xuXG4vLyBiZWRyb2NrIGJyb3dzZXJJbml0IGZsYXR0ZW5zIG91ciBpbW11dGFibGUgb2JqZWN0IGludG8gYSBwbGFpbiBvYmplY3Rcbi8vIHdlIGhhdmUgdG8gcmVjcmVhdGUgdGhlIHN0YXRlIGFmdGVyIHRoZSBhcHAgaXMgbG9hZGVkXG5jb25zdCBnZXREZWZhdWx0U3RhdGUgPSAoKSA9PiB7XG4gIGNvbnN0IHZpc2libGVMYXllckdyb3VwcyA9IHt9O1xuICBjb25zdCBzdHlsZVR5cGUgPSBJTklUSUFMX1NUWUxFX1RZUEU7XG4gIGNvbnN0IHRvcExheWVyR3JvdXBzID0ge307XG5cbiAgcmV0dXJuIHtcbiAgICBzdHlsZVR5cGUsXG4gICAgdmlzaWJsZUxheWVyR3JvdXBzLFxuICAgIHRvcExheWVyR3JvdXBzLFxuICAgIG1hcFN0eWxlczoge30sXG4gICAgYnVpbGRpbmdMYXllcjoge1xuICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbG9yOiBoZXhUb1JnYihERUZBVUxUX0JMREdfQ09MT1IpLFxuICAgICAgb3BhY2l0eTogMC43XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IElOSVRJQUxfTUFQX1NUWUxFID0gZ2V0RGVmYXVsdFN0YXRlKCk7XG5cbmNvbnN0IG1hcFN0eWxlUmVkdWNlciA9IGhhbmRsZUFjdGlvbnMoe1xuICBbQWN0aW9uVHlwZXMuTUFQX0NPTkZJR19DSEFOR0VdOiBtYXBDb25maWdDaGFuZ2VVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuTUFQX1NUWUxFX0NIQU5HRV06IG1hcFN0eWxlQ2hhbmdlVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLk1BUF9CVUlMRElOR19DSEFOR0VdOiBtYXBCdWlsZGluZ0NoYW5nZVVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5MT0FEX01BUF9TVFlMRVNdOiBsb2FkTWFwU3R5bGVzVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkxPQURfTUFQX1NUWUxFX0VSUl06IGxvYWRNYXBTdHlsZUVyclVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5SRUNFSVZFX01BUF9DT05GSUddOiByZWNlaXZlTWFwQ29uZmlnVXBkYXRlclxufSwgSU5JVElBTF9NQVBfU1RZTEUpO1xuXG5leHBvcnQgZGVmYXVsdCBtYXBTdHlsZVJlZHVjZXI7XG4iXX0=