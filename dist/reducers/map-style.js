'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INITIAL_MAP_STYLE = undefined;

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _handleActions;

// Actions


// Utils


// Constants


var _reduxActions = require('redux-actions');

var _reactPalm = require('react-palm');

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _d3Color = require('d3-color');

var _actionTypes = require('../constants/action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _mapboxGlStyleEditor = require('../utils/map-style-utils/mapbox-gl-style-editor');

var _colorUtils = require('../utils/color-utils');

var _defaultSettings = require('../constants/default-settings');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAP_CONFIG_CHANGE = _actionTypes2.default.MAP_CONFIG_CHANGE,
    MAP_STYLE_CHANGE = _actionTypes2.default.MAP_STYLE_CHANGE,
    LOAD_MAP_STYLES = _actionTypes2.default.LOAD_MAP_STYLES,
    LOAD_MAP_STYLE_ERR = _actionTypes2.default.LOAD_MAP_STYLE_ERR,
    RECEIVE_MAP_CONFIG = _actionTypes2.default.RECEIVE_MAP_CONFIG,
    MAP_BUILDING_CHANGE = _actionTypes2.default.MAP_BUILDING_CHANGE;


var DEFAULT_BLDG_COLOR = '#D1CEC7';

// bedrock browserInit flattens our immutable object into a plain object
// we have to recreate the state after the app is loaded
var getDefaultState = function getDefaultState() {
  var visibleLayerGroups = {};
  var styleType = _defaultSettings.INITIAL_STYLE_TYPE;
  var topLayerGroups = {};

  return {
    styleType: styleType,
    visibleLayerGroups: visibleLayerGroups,
    topLayerGroups: topLayerGroups,
    mapStyles: {},
    buildingLayer: {
      isVisible: false,
      color: (0, _colorUtils.hexToRgb)(DEFAULT_BLDG_COLOR),
      opacity: 0.7
    }
  };
};

/**
 * Create two map styles from preset map style, one for top map one for bottom
 *
 * @param {string} styleType - current map style
 * @param {object} visibleLayerGroups - visible layers of bottom map
 * @param {object} topLayerGroups - visible layers of top map
 * @param {object} mapStyles - a dictionary of all map styles
 * @returns {object} bottomMapStyle | topMapStyle | isRaster
 */
function getMapStyles(_ref) {
  var styleType = _ref.styleType,
      visibleLayerGroups = _ref.visibleLayerGroups,
      topLayerGroups = _ref.topLayerGroups,
      mapStyles = _ref.mapStyles;

  var mapStyle = mapStyles[styleType] && mapStyles[styleType];
  if (!mapStyle.style) {
    return {};
  }

  var editable = Object.keys(visibleLayerGroups).length;

  var bottomMapStyle = !editable ? _immutable2.default.fromJS(mapStyle.style) : (0, _mapboxGlStyleEditor.editBottomMapStyle)({
    id: styleType,
    mapStyle: mapStyle,
    visibleLayerGroups: visibleLayerGroups
  });

  var hasTopLayer = editable && Object.values(topLayerGroups).some(function (v) {
    return v;
  });

  // mute top layer if not visible in bottom layer
  var topLayers = hasTopLayer && Object.keys(topLayerGroups).reduce(function (accu, key) {
    var _extends2;

    return (0, _extends4.default)({}, accu, (_extends2 = {}, _extends2[key] = topLayerGroups[key] && visibleLayerGroups[key], _extends2));
  }, {});

  var topMapStyle = hasTopLayer ? (0, _mapboxGlStyleEditor.editTopMapStyle)({
    id: styleType,
    mapStyle: mapStyle,
    visibleLayerGroups: topLayers
  }) : null;

  return { bottomMapStyle: bottomMapStyle, topMapStyle: topMapStyle, editable: editable };
}

function getBuildingColor(style) {
  var bldgFillLayer = (style.style.layers || []).find(function (_ref2) {
    var id = _ref2.id;
    return id === 'building-fill';
  });

  var buildingColor = bldgFillLayer ? bldgFillLayer.paint['fill-color'] : DEFAULT_BLDG_COLOR;

  // brighten or darken building based on style
  var operation = style.id.match(/(?=(dark|night))/) ? 'brighter' : 'darker';
  var adjusted = (0, _d3Color.rgb)(buildingColor)[operation](0.2);

  return [adjusted.r, adjusted.g, adjusted.b];
}

var onMapConfigChange = function onMapConfigChange(state, action) {
  return (0, _extends4.default)({}, state, action.payload, getMapStyles((0, _extends4.default)({}, state, action.payload)));
};

var onMapStyleChange = function onMapStyleChange(state, _ref3) {
  var styleType = _ref3.payload;

  var visibleLayerGroups = (0, _mapboxGlStyleEditor.getDefaultLayerGroupVisibility)(state.mapStyles[styleType]);

  return (0, _extends4.default)({}, state, {
    styleType: styleType,
    visibleLayerGroups: visibleLayerGroups
  }, getMapStyles((0, _extends4.default)({}, state, {
    visibleLayerGroups: visibleLayerGroups,
    styleType: styleType
  })), {
    buildingLayer: (0, _extends4.default)({}, state.buildingLayer, {
      color: state.mapStyles[styleType].buildingColor
    })
  });
};

var onBuildingLayerChange = function onBuildingLayerChange(state, _ref4) {
  var payload = _ref4.payload;
  return (0, _extends4.default)({}, state, {
    buildingLayer: (0, _extends4.default)({}, state.buildingLayer, payload)
  });
};

var onReceiveMapStyles = function onReceiveMapStyles(state, action) {
  var newStyles = action.payload;
  Object.keys(newStyles).forEach(function (key) {
    var style = newStyles[key];

    // get building color
    newStyles[key] = (0, _extends4.default)({}, style, {
      buildingColor: getBuildingColor(style)
    });
  });

  // add new styles to state
  var newState = (0, _extends4.default)({}, state, {
    mapStyles: (0, _extends4.default)({}, state.mapStyles, newStyles)
  });

  return newStyles[state.styleType] ? onMapStyleChange(newState, { payload: state.styleType }) : newState;
};

// do nothing for now, if didn't load, skip it
var onLoadMapStyleErr = function onLoadMapStyleErr(state, action) {
  return state;
};
var onReceiveMapStyleConfig = function onReceiveMapStyleConfig(state, action) {
  return action.payload.mapStyle ? onMapConfigChange(state, { payload: action.payload.mapStyle }) : state;
};

var INITIAL_MAP_STYLE = exports.INITIAL_MAP_STYLE = getDefaultState();

var mapStyleReducer = (0, _reduxActions.handleActions)((_handleActions = {}, _handleActions[MAP_CONFIG_CHANGE] = onMapConfigChange, _handleActions[MAP_STYLE_CHANGE] = onMapStyleChange, _handleActions[MAP_BUILDING_CHANGE] = onBuildingLayerChange, _handleActions[LOAD_MAP_STYLES] = onReceiveMapStyles, _handleActions[LOAD_MAP_STYLE_ERR] = onLoadMapStyleErr, _handleActions[RECEIVE_MAP_CONFIG] = onReceiveMapStyleConfig, _handleActions), INITIAL_MAP_STYLE);

exports.default = mapStyleReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,