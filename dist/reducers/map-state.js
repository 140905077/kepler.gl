'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fitMapBounds = exports.INITIAL_MAP_STATE = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _handleActions;

var _reduxActions = require('redux-actions');

var _geoViewport = require('@mapbox/geo-viewport');

var _geoViewport2 = _interopRequireDefault(_geoViewport);

var _defaultSettings = require('../constants/default-settings');

var _actionTypes = require('../constants/action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UPDATE_MAP = _actionTypes2.default.UPDATE_MAP,
    FIT_BOUNDS = _actionTypes2.default.FIT_BOUNDS,
    TOGGLE_PERSPECTIVE = _actionTypes2.default.TOGGLE_PERSPECTIVE,
    RECEIVE_MAP_CONFIG = _actionTypes2.default.RECEIVE_MAP_CONFIG,
    TOGGLE_SPLIT_MAP = _actionTypes2.default.TOGGLE_SPLIT_MAP,
    CLOSE_MAP_AT_INDEX = _actionTypes2.default.CLOSE_MAP_AT_INDEX,
    TOGGLE_FULLSCREEN = _actionTypes2.default.TOGGLE_FULLSCREEN;
var INITIAL_MAP_STATE = exports.INITIAL_MAP_STATE = {
  pitch: 0,
  bearing: 0,
  latitude: 37.75043,
  longitude: -122.34679,
  zoom: 9,
  dragRotate: false,
  width: 800,
  height: 800,
  isSplit: false,
  isFullScreen: false
};

/* Transition Functions */
var onMapViewportChange = function onMapViewportChange(state, action) {
  return (0, _extends3.default)({}, state, action.payload || {});
};

var fitMapBounds = exports.fitMapBounds = function fitMapBounds(state, action) {
  var bounds = action.payload;

  var _geoViewport$viewport = _geoViewport2.default.viewport(bounds, [state.width, state.height]),
      center = _geoViewport$viewport.center,
      zoom = _geoViewport$viewport.zoom;

  return (0, _extends3.default)({}, state, {
    latitude: center[1],
    longitude: center[0],
    zoom: zoom
  });
};

var onTogglePerspective = function onTogglePerspective(state, action) {
  return (0, _extends3.default)({}, state, {
    pitch: state.dragRotate ? 0 : 50,
    bearing: state.dragRotate ? 0 : 24
  }, {
    dragRotate: !state.dragRotate
  });
};

var onLocationChange = function onLocationChange(state, action) {
  var _ref = action.payload.mapState || {},
      _ref$isSplit = _ref.isSplit,
      isSplit = _ref$isSplit === undefined ? false : _ref$isSplit;

  return (0, _extends3.default)({}, state, action.payload.mapState || {}, {
    isSplit: isSplit
  }, isSplit ? getMapDimForSplitMap(isSplit, state) : {});
};

var onSplitMap = function onSplitMap(state, action) {
  return (0, _extends3.default)({}, state, {
    isSplit: !state.isSplit
  }, getMapDimForSplitMap(!state.isSplit, state));
};

var onToggleFullScreen = function onToggleFullScreen(state, action) {
  return (0, _extends3.default)({}, state, {
    isFullScreen: !state.isFullScreen
  }, getMapDimForFullScreen(!state.isFullScreen, state));
};

/* Reducer */
var mapStateReducer = (0, _reduxActions.handleActions)((_handleActions = {}, _handleActions[UPDATE_MAP] = onMapViewportChange, _handleActions[FIT_BOUNDS] = fitMapBounds, _handleActions[TOGGLE_PERSPECTIVE] = onTogglePerspective, _handleActions[RECEIVE_MAP_CONFIG] = onLocationChange, _handleActions[TOGGLE_SPLIT_MAP] = onSplitMap, _handleActions[CLOSE_MAP_AT_INDEX] = onSplitMap, _handleActions[TOGGLE_FULLSCREEN] = onToggleFullScreen, _handleActions), INITIAL_MAP_STATE);

// Helpers
function getMapDimForSplitMap(isSplit, state) {
  return {
    width: isSplit ? state.width / 2 : state.width * 2
  };
}

function getMapDimForFullScreen(isFullScreen, state) {
  return {
    height: state.height + (_defaultSettings.DIMENSIONS.qbHeight + _defaultSettings.DIMENSIONS.headerHeight) * Number(isFullScreen) - (_defaultSettings.DIMENSIONS.qbHeight + _defaultSettings.DIMENSIONS.headerHeight) * Number(!isFullScreen)
  };
}

exports.default = mapStateReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9tYXAtc3RhdGUuanMiXSwibmFtZXMiOlsiVVBEQVRFX01BUCIsIkZJVF9CT1VORFMiLCJUT0dHTEVfUEVSU1BFQ1RJVkUiLCJSRUNFSVZFX01BUF9DT05GSUciLCJUT0dHTEVfU1BMSVRfTUFQIiwiQ0xPU0VfTUFQX0FUX0lOREVYIiwiVE9HR0xFX0ZVTExTQ1JFRU4iLCJJTklUSUFMX01BUF9TVEFURSIsInBpdGNoIiwiYmVhcmluZyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiem9vbSIsImRyYWdSb3RhdGUiLCJ3aWR0aCIsImhlaWdodCIsImlzU3BsaXQiLCJpc0Z1bGxTY3JlZW4iLCJvbk1hcFZpZXdwb3J0Q2hhbmdlIiwic3RhdGUiLCJhY3Rpb24iLCJwYXlsb2FkIiwiZml0TWFwQm91bmRzIiwiYm91bmRzIiwidmlld3BvcnQiLCJjZW50ZXIiLCJvblRvZ2dsZVBlcnNwZWN0aXZlIiwib25Mb2NhdGlvbkNoYW5nZSIsIm1hcFN0YXRlIiwiZ2V0TWFwRGltRm9yU3BsaXRNYXAiLCJvblNwbGl0TWFwIiwib25Ub2dnbGVGdWxsU2NyZWVuIiwiZ2V0TWFwRGltRm9yRnVsbFNjcmVlbiIsIm1hcFN0YXRlUmVkdWNlciIsInFiSGVpZ2h0IiwiaGVhZGVySGVpZ2h0IiwiTnVtYmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0lBR0VBLFUseUJBQUFBLFU7SUFDQUMsVSx5QkFBQUEsVTtJQUNBQyxrQix5QkFBQUEsa0I7SUFDQUMsa0IseUJBQUFBLGtCO0lBQ0FDLGdCLHlCQUFBQSxnQjtJQUNBQyxrQix5QkFBQUEsa0I7SUFDQUMsaUIseUJBQUFBLGlCO0FBR0ssSUFBTUMsZ0RBQW9CO0FBQy9CQyxTQUFPLENBRHdCO0FBRS9CQyxXQUFTLENBRnNCO0FBRy9CQyxZQUFVLFFBSHFCO0FBSS9CQyxhQUFXLENBQUMsU0FKbUI7QUFLL0JDLFFBQU0sQ0FMeUI7QUFN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QUFoQyxFQUE4Q0UsS0FBOUMsRUFBcUQ7QUFDbkQsU0FBTztBQUNMSixZQUFRSSxNQUFNSixNQUFOLEdBQ0osQ0FBQyw0QkFBV21CLFFBQVgsR0FBc0IsNEJBQVdDLFlBQWxDLElBQWtEQyxPQUFPbkIsWUFBUCxDQUQ5QyxHQUVKLENBQUMsNEJBQVdpQixRQUFYLEdBQXNCLDRCQUFXQyxZQUFsQyxJQUFrREMsT0FBTyxDQUFDbkIsWUFBUjtBQUhqRCxHQUFQO0FBS0Q7O2tCQUVjZ0IsZSIsImZpbGUiOiJtYXAtc3RhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2hhbmRsZUFjdGlvbnN9IGZyb20gJ3JlZHV4LWFjdGlvbnMnO1xuaW1wb3J0IGdlb1ZpZXdwb3J0IGZyb20gJ0BtYXBib3gvZ2VvLXZpZXdwb3J0JztcbmltcG9ydCB7RElNRU5TSU9OU30gZnJvbSBcIi4uL2NvbnN0YW50cy9kZWZhdWx0LXNldHRpbmdzXCI7XG5pbXBvcnQgQWN0aW9uVHlwZXMgZnJvbSAnLi4vY29uc3RhbnRzL2FjdGlvbi10eXBlcyc7XG5cbmNvbnN0IHtcbiAgVVBEQVRFX01BUCxcbiAgRklUX0JPVU5EUyxcbiAgVE9HR0xFX1BFUlNQRUNUSVZFLFxuICBSRUNFSVZFX01BUF9DT05GSUcsXG4gIFRPR0dMRV9TUExJVF9NQVAsXG4gIENMT1NFX01BUF9BVF9JTkRFWCxcbiAgVE9HR0xFX0ZVTExTQ1JFRU5cbn0gPSBBY3Rpb25UeXBlcztcblxuZXhwb3J0IGNvbnN0IElOSVRJQUxfTUFQX1NUQVRFID0ge1xuICBwaXRjaDogMCxcbiAgYmVhcmluZzogMCxcbiAgbGF0aXR1ZGU6IDM3Ljc1MDQzLFxuICBsb25naXR1ZGU6IC0xMjIuMzQ2NzksXG4gIHpvb206IDksXG4gIGRyYWdSb3RhdGU6IGZhbHNlLFxuICB3aWR0aDogODAwLFxuICBoZWlnaHQ6IDgwMCxcbiAgaXNTcGxpdDogZmFsc2UsXG4gIGlzRnVsbFNjcmVlbjogZmFsc2Vcbn07XG5cbi8qIFRyYW5zaXRpb24gRnVuY3Rpb25zICovXG5jb25zdCBvbk1hcFZpZXdwb3J0Q2hhbmdlID0gKHN0YXRlLCBhY3Rpb24pID0+ICh7XG4gIC4uLnN0YXRlLFxuICAuLi4oYWN0aW9uLnBheWxvYWQgfHwge30pXG59KTtcblxuZXhwb3J0IGNvbnN0IGZpdE1hcEJvdW5kcyA9IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIGNvbnN0IGJvdW5kcyA9IGFjdGlvbi5wYXlsb2FkO1xuICBjb25zdCB7Y2VudGVyLCB6b29tfSA9IGdlb1ZpZXdwb3J0LnZpZXdwb3J0KFxuICAgIGJvdW5kcywgW3N0YXRlLndpZHRoLCBzdGF0ZS5oZWlnaHRdKTtcblxuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIGxhdGl0dWRlOiBjZW50ZXJbMV0sXG4gICAgbG9uZ2l0dWRlOiBjZW50ZXJbMF0sXG4gICAgem9vbVxuICB9O1xufTtcblxuY29uc3Qgb25Ub2dnbGVQZXJzcGVjdGl2ZSA9IChzdGF0ZSwgYWN0aW9uKSA9PiAoe1xuICAuLi5zdGF0ZSxcbiAgLi4ue1xuICAgIHBpdGNoOiBzdGF0ZS5kcmFnUm90YXRlID8gMCA6IDUwLFxuICAgIGJlYXJpbmc6IHN0YXRlLmRyYWdSb3RhdGUgPyAwIDogMjRcbiAgfSxcbiAgZHJhZ1JvdGF0ZTogIXN0YXRlLmRyYWdSb3RhdGVcbn0pO1xuXG5jb25zdCBvbkxvY2F0aW9uQ2hhbmdlID0gKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgY29uc3Qge2lzU3BsaXQgPSBmYWxzZX0gPSBhY3Rpb24ucGF5bG9hZC5tYXBTdGF0ZSB8fCB7fTtcblxuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIC4uLihhY3Rpb24ucGF5bG9hZC5tYXBTdGF0ZSB8fCB7fSksXG4gICAgaXNTcGxpdCxcbiAgICAuLi4oaXNTcGxpdCA/IGdldE1hcERpbUZvclNwbGl0TWFwKGlzU3BsaXQsIHN0YXRlKSA6IHt9KVxuICB9O1xufTtcblxuY29uc3Qgb25TcGxpdE1hcCA9IChzdGF0ZSwgYWN0aW9uKSA9PiAoe1xuICAuLi5zdGF0ZSxcbiAgaXNTcGxpdDogIXN0YXRlLmlzU3BsaXQsXG4gIC4uLmdldE1hcERpbUZvclNwbGl0TWFwKCFzdGF0ZS5pc1NwbGl0LCBzdGF0ZSlcbn0pO1xuXG5jb25zdCBvblRvZ2dsZUZ1bGxTY3JlZW4gPSAoc3RhdGUsIGFjdGlvbikgPT4gKHtcbiAgLi4uc3RhdGUsXG4gIGlzRnVsbFNjcmVlbjogIXN0YXRlLmlzRnVsbFNjcmVlbixcbiAgLi4uZ2V0TWFwRGltRm9yRnVsbFNjcmVlbighc3RhdGUuaXNGdWxsU2NyZWVuLCBzdGF0ZSlcbn0pO1xuXG4vKiBSZWR1Y2VyICovXG5jb25zdCBtYXBTdGF0ZVJlZHVjZXIgPSBoYW5kbGVBY3Rpb25zKHtcbiAgW1VQREFURV9NQVBdOiBvbk1hcFZpZXdwb3J0Q2hhbmdlLFxuICBbRklUX0JPVU5EU106IGZpdE1hcEJvdW5kcyxcbiAgW1RPR0dMRV9QRVJTUEVDVElWRV06IG9uVG9nZ2xlUGVyc3BlY3RpdmUsXG4gIFtSRUNFSVZFX01BUF9DT05GSUddOiBvbkxvY2F0aW9uQ2hhbmdlLFxuICBbVE9HR0xFX1NQTElUX01BUF06IG9uU3BsaXRNYXAsXG4gIFtDTE9TRV9NQVBfQVRfSU5ERVhdOiBvblNwbGl0TWFwLFxuICBbVE9HR0xFX0ZVTExTQ1JFRU5dOiBvblRvZ2dsZUZ1bGxTY3JlZW5cbn0sIElOSVRJQUxfTUFQX1NUQVRFKTtcblxuLy8gSGVscGVyc1xuZnVuY3Rpb24gZ2V0TWFwRGltRm9yU3BsaXRNYXAoaXNTcGxpdCwgc3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogaXNTcGxpdCA/IChzdGF0ZS53aWR0aCAvIDIpIDogKHN0YXRlLndpZHRoICogMilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNYXBEaW1Gb3JGdWxsU2NyZWVuKGlzRnVsbFNjcmVlbiwgc3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IHN0YXRlLmhlaWdodFxuICAgICAgKyAoRElNRU5TSU9OUy5xYkhlaWdodCArIERJTUVOU0lPTlMuaGVhZGVySGVpZ2h0KSAqIE51bWJlcihpc0Z1bGxTY3JlZW4pXG4gICAgICAtIChESU1FTlNJT05TLnFiSGVpZ2h0ICsgRElNRU5TSU9OUy5oZWFkZXJIZWlnaHQpICogTnVtYmVyKCFpc0Z1bGxTY3JlZW4pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwU3RhdGVSZWR1Y2VyO1xuIl19