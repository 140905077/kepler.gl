'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INITIAL_MAP_STATE = undefined;

var _handleActions;

var _reduxActions = require('redux-actions');

var _actionTypes = require('../constants/action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _mapStateUpdaters = require('./map-state-updaters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INITIAL_MAP_STATE = exports.INITIAL_MAP_STATE = {
  pitch: 0,
  bearing: 0,
  latitude: 37.75043,
  longitude: -122.34679,
  zoom: 9,
  dragRotate: false,
  width: 800,
  height: 800,
  isSplit: false,
  isFullScreen: false
};

/* Reducer */
var mapStateReducer = (0, _reduxActions.handleActions)((_handleActions = {}, _handleActions[_actionTypes2.default.UPDATE_MAP] = _mapStateUpdaters.updateMapUpdater, _handleActions[_actionTypes2.default.FIT_BOUNDS] = _mapStateUpdaters.fitBoundsUpdater, _handleActions[_actionTypes2.default.TOGGLE_PERSPECTIVE] = _mapStateUpdaters.togglePerspectiveUpdater, _handleActions[_actionTypes2.default.RECEIVE_MAP_CONFIG] = _mapStateUpdaters.receiveMapConfigUpdater, _handleActions[_actionTypes2.default.TOGGLE_SPLIT_MAP] = _mapStateUpdaters.toggleSplitMapUpdater, _handleActions[_actionTypes2.default.CLOSE_MAP_AT_INDEX] = _mapStateUpdaters.closeMapAtIndexUpdater, _handleActions[_actionTypes2.default.TOGGLE_FULLSCREEN] = _mapStateUpdaters.toggleFullScreenUpdater, _handleActions), INITIAL_MAP_STATE);

// function getMapDimForFullScreen(isFullScreen, state) {
//   return {
//     height: state.height
//       + (DIMENSIONS.qbHeight + DIMENSIONS.headerHeight) * Number(isFullScreen)
//       - (DIMENSIONS.qbHeight + DIMENSIONS.headerHeight) * Number(!isFullScreen)
//   }
// }

exports.default = mapStateReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9tYXAtc3RhdGUuanMiXSwibmFtZXMiOlsiSU5JVElBTF9NQVBfU1RBVEUiLCJwaXRjaCIsImJlYXJpbmciLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInpvb20iLCJkcmFnUm90YXRlIiwid2lkdGgiLCJoZWlnaHQiLCJpc1NwbGl0IiwiaXNGdWxsU2NyZWVuIiwibWFwU3RhdGVSZWR1Y2VyIiwiVVBEQVRFX01BUCIsIkZJVF9CT1VORFMiLCJUT0dHTEVfUEVSU1BFQ1RJVkUiLCJSRUNFSVZFX01BUF9DT05GSUciLCJUT0dHTEVfU1BMSVRfTUFQIiwiQ0xPU0VfTUFQX0FUX0lOREVYIiwiVE9HR0xFX0ZVTExTQ1JFRU4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBZ0JBOzs7O0FBZE8sSUFBTUEsZ0RBQW9CO0FBQy9CQyxTQUFPLENBRHdCO0FBRS9CQyxXQUFTLENBRnNCO0FBRy9CQyxZQUFVLFFBSHFCO0FBSS9CQyxhQUFXLENBQUMsU0FKbUI7QUFLL0JDLFFBQU0sQ0FMeUI7QUFNL0JDLGNBQVksS0FObUI7QUFPL0JDLFNBQU8sR0FQd0I7QUFRL0JDLFVBQVEsR0FSdUI7QUFTL0JDLFdBQVMsS0FUc0I7QUFVL0JDLGdCQUFjO0FBVmlCLENBQTFCOztBQXdCUDtBQUNBLElBQU1DLGtCQUFrQixzRUFDckIsc0JBQVlDLFVBRFMsdURBRXJCLHNCQUFZQyxVQUZTLHVEQUdyQixzQkFBWUMsa0JBSFMsK0RBSXJCLHNCQUFZQyxrQkFKUyw4REFLckIsc0JBQVlDLGdCQUxTLDREQU1yQixzQkFBWUMsa0JBTlMsNkRBT3JCLHNCQUFZQyxpQkFQUyxnRUFRckJsQixpQkFScUIsQ0FBeEI7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O2tCQUVlVyxlIiwiZmlsZSI6Im1hcC1zdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aGFuZGxlQWN0aW9uc30gZnJvbSAncmVkdXgtYWN0aW9ucyc7XG5pbXBvcnQgQWN0aW9uVHlwZXMgZnJvbSAnLi4vY29uc3RhbnRzL2FjdGlvbi10eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBJTklUSUFMX01BUF9TVEFURSA9IHtcbiAgcGl0Y2g6IDAsXG4gIGJlYXJpbmc6IDAsXG4gIGxhdGl0dWRlOiAzNy43NTA0MyxcbiAgbG9uZ2l0dWRlOiAtMTIyLjM0Njc5LFxuICB6b29tOiA5LFxuICBkcmFnUm90YXRlOiBmYWxzZSxcbiAgd2lkdGg6IDgwMCxcbiAgaGVpZ2h0OiA4MDAsXG4gIGlzU3BsaXQ6IGZhbHNlLFxuICBpc0Z1bGxTY3JlZW46IGZhbHNlXG59O1xuXG5cbmltcG9ydCB7XG4gIGNsb3NlTWFwQXRJbmRleFVwZGF0ZXIsXG4gIGZpdEJvdW5kc1VwZGF0ZXIsXG4gIHJlY2VpdmVNYXBDb25maWdVcGRhdGVyLFxuICB0b2dnbGVGdWxsU2NyZWVuVXBkYXRlcixcbiAgdG9nZ2xlUGVyc3BlY3RpdmVVcGRhdGVyLFxuICB0b2dnbGVTcGxpdE1hcFVwZGF0ZXIsXG4gIHVwZGF0ZU1hcFVwZGF0ZXJcbn0gZnJvbSAnLi9tYXAtc3RhdGUtdXBkYXRlcnMnO1xuXG4vKiBSZWR1Y2VyICovXG5jb25zdCBtYXBTdGF0ZVJlZHVjZXIgPSBoYW5kbGVBY3Rpb25zKHtcbiAgW0FjdGlvblR5cGVzLlVQREFURV9NQVBdOiB1cGRhdGVNYXBVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuRklUX0JPVU5EU106IGZpdEJvdW5kc1VwZGF0ZXIgLFxuICBbQWN0aW9uVHlwZXMuVE9HR0xFX1BFUlNQRUNUSVZFXTogdG9nZ2xlUGVyc3BlY3RpdmVVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuUkVDRUlWRV9NQVBfQ09ORklHXTogcmVjZWl2ZU1hcENvbmZpZ1VwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5UT0dHTEVfU1BMSVRfTUFQXTogdG9nZ2xlU3BsaXRNYXBVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuQ0xPU0VfTUFQX0FUX0lOREVYXTogY2xvc2VNYXBBdEluZGV4VXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLlRPR0dMRV9GVUxMU0NSRUVOXTogdG9nZ2xlRnVsbFNjcmVlblVwZGF0ZXJcbn0sIElOSVRJQUxfTUFQX1NUQVRFKTtcblxuLy8gZnVuY3Rpb24gZ2V0TWFwRGltRm9yRnVsbFNjcmVlbihpc0Z1bGxTY3JlZW4sIHN0YXRlKSB7XG4vLyAgIHJldHVybiB7XG4vLyAgICAgaGVpZ2h0OiBzdGF0ZS5oZWlnaHRcbi8vICAgICAgICsgKERJTUVOU0lPTlMucWJIZWlnaHQgKyBESU1FTlNJT05TLmhlYWRlckhlaWdodCkgKiBOdW1iZXIoaXNGdWxsU2NyZWVuKVxuLy8gICAgICAgLSAoRElNRU5TSU9OUy5xYkhlaWdodCArIERJTUVOU0lPTlMuaGVhZGVySGVpZ2h0KSAqIE51bWJlcighaXNGdWxsU2NyZWVuKVxuLy8gICB9XG4vLyB9XG5cbmV4cG9ydCBkZWZhdWx0IG1hcFN0YXRlUmVkdWNlcjtcbiJdfQ==