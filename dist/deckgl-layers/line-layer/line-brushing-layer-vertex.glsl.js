"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

// Copyright (c) 2015 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
exports.default = "#define SHADER_NAME extruded-line-layer-vertex-shader\n\n\nattribute vec3 positions;\nattribute vec3 instanceSourcePositions;\nattribute vec3 instanceTargetPositions;\nattribute vec4 instanceColors;\nattribute vec4 instanceTargetColors;\n\nattribute vec3 instancePickingColors;\nattribute float instanceStrokeWidth;\n\nuniform float strokeScale;\nuniform float opacity;\nuniform float renderPickingBuffer;\nuniform vec4 pickedColor;\n\nuniform float enableBrushing;\nuniform float brushSource;\nuniform float brushTarget;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  // Position\n  vec3 sourcePos = project_position(instanceSourcePositions);\n  vec3 targetPos = project_position(instanceTargetPositions);\n  vec4 source = project_to_clipspace(vec4(sourcePos, 1.0));\n  vec4 target = project_to_clipspace(vec4(targetPos, 1.0));\n  // if not enabled isPointInRange will always return true\n  float isSourceInBrush = isPointInRange(instanceSourcePositions.xy, brushSource);\n  float isTargetInBrush = isPointInRange(instanceTargetPositions.xy, brushTarget);\n\n  float isInBrush = float(enableBrushing <= 0. ||\n  (brushSource * isSourceInBrush > 0. || brushTarget * isTargetInBrush > 0.));\n\n  // mix strokeScale with brush, if not in brush, return 0\n  float width = strokeScale * instanceStrokeWidth;\n  float finalWidth = mix(0.0, width, isInBrush);\n\n  // linear interpolation of source & target to pick right coord\n  float segmentIndex = positions.x;\n  vec4 p = mix(source, target, segmentIndex);\n\n  // extrude\n  vec2 offset = getExtrusionOffset(target.xy - source.xy, positions.y, finalWidth);\n  gl_Position = p + vec4(offset, 0.0, 0.0);\n\n  float picked = isPicked(instancePickingColors);\n\n  // Color  \n  vec4 color = mix(instanceColors, instanceTargetColors, positions.x) / 255.;\n  vec4 finalColor = mix(color, pickedColor / 255., picked);\n  vec4 pickingColor = vec4(instancePickingColors / 255., 1.);\n\n  vColor = mix(\n    vec4(finalColor.rgb, finalColor.a * opacity),\n    pickingColor,\n    renderPickingBuffer\n  );\n}\n";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNrZ2wtbGF5ZXJzL2xpbmUtbGF5ZXIvbGluZS1icnVzaGluZy1sYXllci12ZXJ0ZXguZ2xzbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJsaW5lLWJydXNoaW5nLWxheWVyLXZlcnRleC5nbHNsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTUgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuZXhwb3J0IGRlZmF1bHQgYFxcXG4jZGVmaW5lIFNIQURFUl9OQU1FIGV4dHJ1ZGVkLWxpbmUtbGF5ZXItdmVydGV4LXNoYWRlclxuXG5cbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9ucztcbmF0dHJpYnV0ZSB2ZWMzIGluc3RhbmNlU291cmNlUG9zaXRpb25zO1xuYXR0cmlidXRlIHZlYzMgaW5zdGFuY2VUYXJnZXRQb3NpdGlvbnM7XG5hdHRyaWJ1dGUgdmVjNCBpbnN0YW5jZUNvbG9ycztcbmF0dHJpYnV0ZSB2ZWM0IGluc3RhbmNlVGFyZ2V0Q29sb3JzO1xuXG5hdHRyaWJ1dGUgdmVjMyBpbnN0YW5jZVBpY2tpbmdDb2xvcnM7XG5hdHRyaWJ1dGUgZmxvYXQgaW5zdGFuY2VTdHJva2VXaWR0aDtcblxudW5pZm9ybSBmbG9hdCBzdHJva2VTY2FsZTtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbnVuaWZvcm0gZmxvYXQgcmVuZGVyUGlja2luZ0J1ZmZlcjtcbnVuaWZvcm0gdmVjNCBwaWNrZWRDb2xvcjtcblxudW5pZm9ybSBmbG9hdCBlbmFibGVCcnVzaGluZztcbnVuaWZvcm0gZmxvYXQgYnJ1c2hTb3VyY2U7XG51bmlmb3JtIGZsb2F0IGJydXNoVGFyZ2V0O1xuXG52YXJ5aW5nIHZlYzQgdkNvbG9yO1xuXG52b2lkIG1haW4odm9pZCkge1xuICAvLyBQb3NpdGlvblxuICB2ZWMzIHNvdXJjZVBvcyA9IHByb2plY3RfcG9zaXRpb24oaW5zdGFuY2VTb3VyY2VQb3NpdGlvbnMpO1xuICB2ZWMzIHRhcmdldFBvcyA9IHByb2plY3RfcG9zaXRpb24oaW5zdGFuY2VUYXJnZXRQb3NpdGlvbnMpO1xuICB2ZWM0IHNvdXJjZSA9IHByb2plY3RfdG9fY2xpcHNwYWNlKHZlYzQoc291cmNlUG9zLCAxLjApKTtcbiAgdmVjNCB0YXJnZXQgPSBwcm9qZWN0X3RvX2NsaXBzcGFjZSh2ZWM0KHRhcmdldFBvcywgMS4wKSk7XG4gIC8vIGlmIG5vdCBlbmFibGVkIGlzUG9pbnRJblJhbmdlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlXG4gIGZsb2F0IGlzU291cmNlSW5CcnVzaCA9IGlzUG9pbnRJblJhbmdlKGluc3RhbmNlU291cmNlUG9zaXRpb25zLnh5LCBicnVzaFNvdXJjZSk7XG4gIGZsb2F0IGlzVGFyZ2V0SW5CcnVzaCA9IGlzUG9pbnRJblJhbmdlKGluc3RhbmNlVGFyZ2V0UG9zaXRpb25zLnh5LCBicnVzaFRhcmdldCk7XG5cbiAgZmxvYXQgaXNJbkJydXNoID0gZmxvYXQoZW5hYmxlQnJ1c2hpbmcgPD0gMC4gfHxcbiAgKGJydXNoU291cmNlICogaXNTb3VyY2VJbkJydXNoID4gMC4gfHwgYnJ1c2hUYXJnZXQgKiBpc1RhcmdldEluQnJ1c2ggPiAwLikpO1xuXG4gIC8vIG1peCBzdHJva2VTY2FsZSB3aXRoIGJydXNoLCBpZiBub3QgaW4gYnJ1c2gsIHJldHVybiAwXG4gIGZsb2F0IHdpZHRoID0gc3Ryb2tlU2NhbGUgKiBpbnN0YW5jZVN0cm9rZVdpZHRoO1xuICBmbG9hdCBmaW5hbFdpZHRoID0gbWl4KDAuMCwgd2lkdGgsIGlzSW5CcnVzaCk7XG5cbiAgLy8gbGluZWFyIGludGVycG9sYXRpb24gb2Ygc291cmNlICYgdGFyZ2V0IHRvIHBpY2sgcmlnaHQgY29vcmRcbiAgZmxvYXQgc2VnbWVudEluZGV4ID0gcG9zaXRpb25zLng7XG4gIHZlYzQgcCA9IG1peChzb3VyY2UsIHRhcmdldCwgc2VnbWVudEluZGV4KTtcblxuICAvLyBleHRydWRlXG4gIHZlYzIgb2Zmc2V0ID0gZ2V0RXh0cnVzaW9uT2Zmc2V0KHRhcmdldC54eSAtIHNvdXJjZS54eSwgcG9zaXRpb25zLnksIGZpbmFsV2lkdGgpO1xuICBnbF9Qb3NpdGlvbiA9IHAgKyB2ZWM0KG9mZnNldCwgMC4wLCAwLjApO1xuXG4gIGZsb2F0IHBpY2tlZCA9IGlzUGlja2VkKGluc3RhbmNlUGlja2luZ0NvbG9ycyk7XG5cbiAgLy8gQ29sb3IgIFxuICB2ZWM0IGNvbG9yID0gbWl4KGluc3RhbmNlQ29sb3JzLCBpbnN0YW5jZVRhcmdldENvbG9ycywgcG9zaXRpb25zLngpIC8gMjU1LjtcbiAgdmVjNCBmaW5hbENvbG9yID0gbWl4KGNvbG9yLCBwaWNrZWRDb2xvciAvIDI1NS4sIHBpY2tlZCk7XG4gIHZlYzQgcGlja2luZ0NvbG9yID0gdmVjNChpbnN0YW5jZVBpY2tpbmdDb2xvcnMgLyAyNTUuLCAxLik7XG5cbiAgdkNvbG9yID0gbWl4KFxuICAgIHZlYzQoZmluYWxDb2xvci5yZ2IsIGZpbmFsQ29sb3IuYSAqIG9wYWNpdHkpLFxuICAgIHBpY2tpbmdDb2xvcixcbiAgICByZW5kZXJQaWNraW5nQnVmZmVyXG4gICk7XG59XG5gO1xuIl19