'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBinColorDomain = getBinColorDomain;
exports.getScaleFunctor = getScaleFunctor;
exports.getColorValueDomain = getColorValueDomain;
exports.getColorScaleFunction = getColorScaleFunction;
exports.getRadiusScaleFunction = getRadiusScaleFunction;
exports.needsRecalculateColorDomain = needsRecalculateColorDomain;
exports.needReCalculateScaleFunction = needReCalculateScaleFunction;
exports.needsRecalculateRadiusRange = needsRecalculateRadiusRange;

var _d3Scale = require('d3-scale');

var _defaultSettings = require('../../constants/default-settings');

// Enable render color by customized color Scale
function getBinColorDomain(scaleType, bins, _ref) {
  var lowerIdx = _ref[0],
      upperIdx = _ref[1];

  switch (scaleType) {
    case _defaultSettings.SCALE_TYPES.quantize:
      return [bins[lowerIdx].value, bins[upperIdx].value];

    case _defaultSettings.SCALE_TYPES.quantile:
      return bins.slice(lowerIdx, upperIdx + 1).map(function (d) {
        return d.value;
      });

    default:
      return [bins[lowerIdx].value, bins[upperIdx].value];
  }
}

function getScaleFunctor(scaleType) {
  switch (scaleType) {
    case _defaultSettings.SCALE_TYPES.quantize:
      return _d3Scale.scaleQuantize;

    case _defaultSettings.SCALE_TYPES.quantile:
      return _d3Scale.scaleQuantile;

    default:
      return _d3Scale.scaleQuantile;
  }
}

function getColorValueDomain(layer) {
  var _layer$props = layer.props,
      lowerPercentile = _layer$props.lowerPercentile,
      upperPercentile = _layer$props.upperPercentile,
      colorScale = _layer$props.colorScale;
  var sortedBins = layer.state.sortedColorBins.sortedBins;

  var len = sortedBins.length;

  if (!len) {
    // err... what do we do
    layer.state.colorValueDomain = null;
  } else {
    var lowerIdx = Math.ceil(lowerPercentile / 100 * (len - 1));
    var upperIdx = Math.floor(upperPercentile / 100 * (len - 1));

    // calculate valueDomain based on
    layer.state.colorValueDomain = getBinColorDomain(colorScale, sortedBins, [lowerIdx, upperIdx]);
    layer.getColorScale();
  }

  layer.props.onSetColorDomain(layer.state.colorValueDomain);
}

function getColorScaleFunction(layer) {
  var _layer$props2 = layer.props,
      colorScale = _layer$props2.colorScale,
      colorDomain = _layer$props2.colorDomain;

  layer.state.colorScaleFunc = getScaleFunctor(colorScale)().domain(colorDomain || layer.state.colorDomain || layer.state.colorValueDomain).range(layer.props.colorRange);
}

function getRadiusScaleFunction(layer) {
  var viewport = layer.context.viewport;

  layer.state.radiusScaleFunc = (0, _d3Scale.scaleSqrt)().domain(layer.state.radiusDomain).range(layer.props.radiusRange.map(function (d) {
    return d * viewport.distanceScales.metersPerPixel[0];
  }));
}

function needsRecalculateColorDomain(oldProps, props) {
  return oldProps.lowerPercentile !== props.lowerPercentile || oldProps.upperPercentile !== props.upperPercentile || oldProps.colorScale !== props.colorScale;
}

function needReCalculateScaleFunction(oldProps, props) {
  return oldProps.colorRange !== props.colorRange;
}

function needsRecalculateRadiusRange(oldProps, props) {
  return oldProps.radiusRange !== props.radiusRange && (oldProps.radiusRange[0] !== props.radiusRange[0] || oldProps.radiusRange[1] !== props.radiusRange[1]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,