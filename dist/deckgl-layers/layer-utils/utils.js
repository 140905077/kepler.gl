'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBinColorDomain = getBinColorDomain;
exports.getScaleFunctor = getScaleFunctor;
exports.getColorValueDomain = getColorValueDomain;
exports.getColorScaleFunction = getColorScaleFunction;
exports.getRadiusScaleFunction = getRadiusScaleFunction;
exports.needsRecalculateColorDomain = needsRecalculateColorDomain;
exports.needReCalculateScaleFunction = needReCalculateScaleFunction;
exports.needsRecalculateRadiusRange = needsRecalculateRadiusRange;

var _d3Scale = require('d3-scale');

var _defaultSettings = require('../../constants/default-settings');

// Enable render color by customized color Scale
function getBinColorDomain(scaleType, bins, _ref) {
  var lowerIdx = _ref[0],
      upperIdx = _ref[1];

  switch (scaleType) {
    case _defaultSettings.SCALE_TYPES.quantize:
      return [bins[lowerIdx].value, bins[upperIdx].value];

    case _defaultSettings.SCALE_TYPES.quantile:
      return bins.slice(lowerIdx, upperIdx + 1).map(function (d) {
        return d.value;
      });

    default:
      return [bins[lowerIdx].value, bins[upperIdx].value];
  }
}

function getScaleFunctor(scaleType) {
  switch (scaleType) {
    case _defaultSettings.SCALE_TYPES.quantize:
      return _d3Scale.scaleQuantize;

    case _defaultSettings.SCALE_TYPES.quantile:
      return _d3Scale.scaleQuantile;

    default:
      return _d3Scale.scaleQuantile;
  }
}

function getColorValueDomain(layer) {
  var _layer$props = layer.props,
      lowerPercentile = _layer$props.lowerPercentile,
      upperPercentile = _layer$props.upperPercentile,
      colorScale = _layer$props.colorScale;
  var sortedBins = layer.state.sortedColorBins.sortedBins;

  var len = sortedBins.length;

  if (!len) {
    // err... what do we do
    layer.state.colorValueDomain = null;
  } else {
    var lowerIdx = Math.ceil(lowerPercentile / 100 * (len - 1));
    var upperIdx = Math.floor(upperPercentile / 100 * (len - 1));

    // calculate valueDomain based on
    layer.state.colorValueDomain = getBinColorDomain(colorScale, sortedBins, [lowerIdx, upperIdx]);
    layer.getColorScale();
  }

  layer.props.onSetColorDomain(layer.state.colorValueDomain);
}

function getColorScaleFunction(layer) {
  var _layer$props2 = layer.props,
      colorScale = _layer$props2.colorScale,
      colorDomain = _layer$props2.colorDomain;

  layer.state.colorScaleFunc = getScaleFunctor(colorScale)().domain(colorDomain || layer.state.colorDomain || layer.state.colorValueDomain).range(layer.props.colorRange);
}

function getRadiusScaleFunction(layer) {
  var viewport = layer.context.viewport;

  layer.state.radiusScaleFunc = (0, _d3Scale.scaleSqrt)().domain(layer.state.radiusDomain).range(layer.props.radiusRange.map(function (d) {
    return d * viewport.distanceScales.metersPerPixel[0];
  }));
}

function needsRecalculateColorDomain(oldProps, props) {
  return oldProps.lowerPercentile !== props.lowerPercentile || oldProps.upperPercentile !== props.upperPercentile || oldProps.colorScale !== props.colorScale;
}

function needReCalculateScaleFunction(oldProps, props) {
  return oldProps.colorRange !== props.colorRange;
}

function needsRecalculateRadiusRange(oldProps, props) {
  return oldProps.radiusRange !== props.radiusRange && (oldProps.radiusRange[0] !== props.radiusRange[0] || oldProps.radiusRange[1] !== props.radiusRange[1]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNrZ2wtbGF5ZXJzL2xheWVyLXV0aWxzL3V0aWxzLmpzIl0sIm5hbWVzIjpbImdldEJpbkNvbG9yRG9tYWluIiwiZ2V0U2NhbGVGdW5jdG9yIiwiZ2V0Q29sb3JWYWx1ZURvbWFpbiIsImdldENvbG9yU2NhbGVGdW5jdGlvbiIsImdldFJhZGl1c1NjYWxlRnVuY3Rpb24iLCJuZWVkc1JlY2FsY3VsYXRlQ29sb3JEb21haW4iLCJuZWVkUmVDYWxjdWxhdGVTY2FsZUZ1bmN0aW9uIiwibmVlZHNSZWNhbGN1bGF0ZVJhZGl1c1JhbmdlIiwic2NhbGVUeXBlIiwiYmlucyIsImxvd2VySWR4IiwidXBwZXJJZHgiLCJxdWFudGl6ZSIsInZhbHVlIiwicXVhbnRpbGUiLCJzbGljZSIsIm1hcCIsImQiLCJsYXllciIsInByb3BzIiwibG93ZXJQZXJjZW50aWxlIiwidXBwZXJQZXJjZW50aWxlIiwiY29sb3JTY2FsZSIsInNvcnRlZEJpbnMiLCJzdGF0ZSIsInNvcnRlZENvbG9yQmlucyIsImxlbiIsImxlbmd0aCIsImNvbG9yVmFsdWVEb21haW4iLCJNYXRoIiwiY2VpbCIsImZsb29yIiwiZ2V0Q29sb3JTY2FsZSIsIm9uU2V0Q29sb3JEb21haW4iLCJjb2xvckRvbWFpbiIsImNvbG9yU2NhbGVGdW5jIiwiZG9tYWluIiwicmFuZ2UiLCJjb2xvclJhbmdlIiwidmlld3BvcnQiLCJjb250ZXh0IiwicmFkaXVzU2NhbGVGdW5jIiwicmFkaXVzRG9tYWluIiwicmFkaXVzUmFuZ2UiLCJkaXN0YW5jZVNjYWxlcyIsIm1ldGVyc1BlclBpeGVsIiwib2xkUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7O1FBSWdCQSxpQixHQUFBQSxpQjtRQWFBQyxlLEdBQUFBLGU7UUFhQUMsbUIsR0FBQUEsbUI7UUFvQkFDLHFCLEdBQUFBLHFCO1FBT0FDLHNCLEdBQUFBLHNCO1FBT0FDLDJCLEdBQUFBLDJCO1FBTUFDLDRCLEdBQUFBLDRCO1FBSUFDLDJCLEdBQUFB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QjNCLEdBQXhCLENBQTRCO0FBQUEsV0FBS0MsSUFBSXNCLFNBQVNLLGNBQVQsQ0FBd0JDLGNBQXhCLENBQXVDLENBQXZDLENBQVQ7QUFBQSxHQUE1QixDQUZtQixDQUE5QjtBQUdEOztBQUVNLFNBQVN4QywyQkFBVCxDQUFxQ3lDLFFBQXJDLEVBQStDM0IsS0FBL0MsRUFBc0Q7QUFDM0QsU0FBTzJCLFNBQVMxQixlQUFULEtBQTZCRCxNQUFNQyxlQUFuQyxJQUNMMEIsU0FBU3pCLGVBQVQsS0FBNkJGLE1BQU1FLGVBRDlCLElBRUx5QixTQUFTeEIsVUFBVCxLQUF3QkgsTUFBTUcsVUFGaEM7QUFHRDs7QUFFTSxTQUFTaEIsNEJBQVQsQ0FBc0N3QyxRQUF0QyxFQUFnRDNCLEtBQWhELEVBQXVEO0FBQzVELFNBQU8yQixTQUFTUixVQUFULEtBQXdCbkIsTUFBTW1CLFVBQXJDO0FBQ0Q7O0FBRU0sU0FBUy9CLDJCQUFULENBQXFDdUMsUUFBckMsRUFBK0MzQixLQUEvQyxFQUFzRDtBQUMzRCxTQUFPMkIsU0FBU0gsV0FBVCxLQUF5QnhCLE1BQU13QixXQUEvQixLQUNKRyxTQUFTSCxXQUFULENBQXFCLENBQXJCLE1BQTRCeEIsTUFBTXdCLFdBQU4sQ0FBa0IsQ0FBbEIsQ0FBNUIsSUFDQUcsU0FBU0gsV0FBVCxDQUFxQixDQUFyQixNQUE0QnhCLE1BQU13QixXQUFOLENBQWtCLENBQWxCLENBRnhCLENBQVA7QUFHRCIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c2NhbGVRdWFudGl6ZSwgc2NhbGVRdWFudGlsZSwgc2NhbGVTcXJ0fSBmcm9tICdkMy1zY2FsZSc7XG5pbXBvcnQge1NDQUxFX1RZUEVTfSBmcm9tICcuLi8uLi9jb25zdGFudHMvZGVmYXVsdC1zZXR0aW5ncyc7XG5cbi8vIEVuYWJsZSByZW5kZXIgY29sb3IgYnkgY3VzdG9taXplZCBjb2xvciBTY2FsZVxuZXhwb3J0IGZ1bmN0aW9uIGdldEJpbkNvbG9yRG9tYWluKHNjYWxlVHlwZSwgYmlucywgW2xvd2VySWR4LCB1cHBlcklkeF0pIHtcbiAgc3dpdGNoIChzY2FsZVR5cGUpIHtcbiAgY2FzZSBTQ0FMRV9UWVBFUy5xdWFudGl6ZTpcbiAgICByZXR1cm4gW2JpbnNbbG93ZXJJZHhdLnZhbHVlLCBiaW5zW3VwcGVySWR4XS52YWx1ZV07XG5cbiAgY2FzZSBTQ0FMRV9UWVBFUy5xdWFudGlsZTpcbiAgICByZXR1cm4gYmlucy5zbGljZShsb3dlcklkeCwgdXBwZXJJZHggKyAxKS5tYXAoZCA9PiBkLnZhbHVlKTtcblxuICBkZWZhdWx0OlxuICAgIHJldHVybiBbYmluc1tsb3dlcklkeF0udmFsdWUsIGJpbnNbdXBwZXJJZHhdLnZhbHVlXTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NhbGVGdW5jdG9yKHNjYWxlVHlwZSkge1xuICBzd2l0Y2ggKHNjYWxlVHlwZSkge1xuICBjYXNlIFNDQUxFX1RZUEVTLnF1YW50aXplOlxuICAgIHJldHVybiBzY2FsZVF1YW50aXplO1xuXG4gIGNhc2UgU0NBTEVfVFlQRVMucXVhbnRpbGU6XG4gICAgcmV0dXJuIHNjYWxlUXVhbnRpbGU7XG5cbiAgZGVmYXVsdDpcbiAgICByZXR1cm4gc2NhbGVRdWFudGlsZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JWYWx1ZURvbWFpbihsYXllcikge1xuICBjb25zdCB7bG93ZXJQZXJjZW50aWxlLCB1cHBlclBlcmNlbnRpbGUsIGNvbG9yU2NhbGV9ID0gbGF5ZXIucHJvcHM7XG4gIGNvbnN0IHtzb3J0ZWRCaW5zfSA9IGxheWVyLnN0YXRlLnNvcnRlZENvbG9yQmlucztcbiAgY29uc3QgbGVuID0gc29ydGVkQmlucy5sZW5ndGg7XG5cbiAgaWYgKCFsZW4pIHtcbiAgICAvLyBlcnIuLi4gd2hhdCBkbyB3ZSBkb1xuICAgIGxheWVyLnN0YXRlLmNvbG9yVmFsdWVEb21haW4gPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGxvd2VySWR4ID0gTWF0aC5jZWlsKGxvd2VyUGVyY2VudGlsZSAvIDEwMCAqIChsZW4gLSAxKSk7XG4gICAgY29uc3QgdXBwZXJJZHggPSBNYXRoLmZsb29yKHVwcGVyUGVyY2VudGlsZSAvIDEwMCAqIChsZW4gLSAxKSk7XG5cbiAgICAvLyBjYWxjdWxhdGUgdmFsdWVEb21haW4gYmFzZWQgb25cbiAgICBsYXllci5zdGF0ZS5jb2xvclZhbHVlRG9tYWluID0gZ2V0QmluQ29sb3JEb21haW4oY29sb3JTY2FsZSwgc29ydGVkQmlucywgW2xvd2VySWR4LCB1cHBlcklkeF0pO1xuICAgIGxheWVyLmdldENvbG9yU2NhbGUoKTtcbiAgfVxuXG4gIGxheWVyLnByb3BzLm9uU2V0Q29sb3JEb21haW4obGF5ZXIuc3RhdGUuY29sb3JWYWx1ZURvbWFpbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvclNjYWxlRnVuY3Rpb24obGF5ZXIpIHtcbiAgY29uc3Qge2NvbG9yU2NhbGUsIGNvbG9yRG9tYWlufSA9IGxheWVyLnByb3BzO1xuICBsYXllci5zdGF0ZS5jb2xvclNjYWxlRnVuYyA9IGdldFNjYWxlRnVuY3Rvcihjb2xvclNjYWxlKSgpXG4gICAgLmRvbWFpbihjb2xvckRvbWFpbiB8fCBsYXllci5zdGF0ZS5jb2xvckRvbWFpbiB8fCBsYXllci5zdGF0ZS5jb2xvclZhbHVlRG9tYWluKVxuICAgIC5yYW5nZShsYXllci5wcm9wcy5jb2xvclJhbmdlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhZGl1c1NjYWxlRnVuY3Rpb24obGF5ZXIpIHtcbiAgY29uc3Qge3ZpZXdwb3J0fSA9IGxheWVyLmNvbnRleHQ7XG4gIGxheWVyLnN0YXRlLnJhZGl1c1NjYWxlRnVuYyA9IHNjYWxlU3FydCgpXG4gICAgICAuZG9tYWluKGxheWVyLnN0YXRlLnJhZGl1c0RvbWFpbilcbiAgICAgIC5yYW5nZShsYXllci5wcm9wcy5yYWRpdXNSYW5nZS5tYXAoZCA9PiBkICogdmlld3BvcnQuZGlzdGFuY2VTY2FsZXMubWV0ZXJzUGVyUGl4ZWxbMF0pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5lZWRzUmVjYWxjdWxhdGVDb2xvckRvbWFpbihvbGRQcm9wcywgcHJvcHMpIHtcbiAgcmV0dXJuIG9sZFByb3BzLmxvd2VyUGVyY2VudGlsZSAhPT0gcHJvcHMubG93ZXJQZXJjZW50aWxlIHx8XG4gICAgb2xkUHJvcHMudXBwZXJQZXJjZW50aWxlICE9PSBwcm9wcy51cHBlclBlcmNlbnRpbGUgfHxcbiAgICBvbGRQcm9wcy5jb2xvclNjYWxlICE9PSBwcm9wcy5jb2xvclNjYWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmVlZFJlQ2FsY3VsYXRlU2NhbGVGdW5jdGlvbihvbGRQcm9wcywgcHJvcHMpIHtcbiAgcmV0dXJuIG9sZFByb3BzLmNvbG9yUmFuZ2UgIT09IHByb3BzLmNvbG9yUmFuZ2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZWVkc1JlY2FsY3VsYXRlUmFkaXVzUmFuZ2Uob2xkUHJvcHMsIHByb3BzKSB7XG4gIHJldHVybiBvbGRQcm9wcy5yYWRpdXNSYW5nZSAhPT0gcHJvcHMucmFkaXVzUmFuZ2UgJiZcbiAgICAob2xkUHJvcHMucmFkaXVzUmFuZ2VbMF0gIT09IHByb3BzLnJhZGl1c1JhbmdlWzBdIHx8XG4gICAgIG9sZFByb3BzLnJhZGl1c1JhbmdlWzFdICE9PSBwcm9wcy5yYWRpdXNSYW5nZVsxXSk7XG59XG4iXX0=