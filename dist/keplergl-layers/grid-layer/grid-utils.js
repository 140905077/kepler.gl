'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pointToPolygonGeo = pointToPolygonGeo;

var _deck = require('deck.gl');

/**
 * top left of the grid to a square polygon for the hover layer
 * and current latitude
 * @param {object} object
 * @param {number} cellSize
 * @param {number} coverage
 * @param {object} properties
 * @param {object} mapState
 * @returns {object} - geojson feature
 */

// TODO: TEST
function pointToPolygonGeo(_ref) {
  var object = _ref.object,
      cellSize = _ref.cellSize,
      coverage = _ref.coverage,
      properties = _ref.properties,
      mapState = _ref.mapState;
  var position = object.position;

  var viewport = new _deck.WebMercatorViewport(mapState);

  if (!position) {
    return null;
  }

  return {
    geometry: {
      coordinates: [viewport.addMetersToLngLat(position, [cellSize * (0.5 - coverage / 2), cellSize * (0.5 - coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 + coverage / 2), cellSize * (0.5 - coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 + coverage / 2), cellSize * (0.5 + coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 - coverage / 2), cellSize * (0.5 + coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 - coverage / 2), cellSize * (0.5 - coverage / 2)])],
      type: 'LineString'
    },
    properties: properties
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9rZXBsZXJnbC1sYXllcnMvZ3JpZC1sYXllci9ncmlkLXV0aWxzLmpzIl0sIm5hbWVzIjpbInBvaW50VG9Qb2x5Z29uR2VvIiwib2JqZWN0IiwiY2VsbFNpemUiLCJjb3ZlcmFnZSIsInByb3BlcnRpZXMiLCJtYXBTdGF0ZSIsInBvc2l0aW9uIiwidmlld3BvcnQiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwiYWRkTWV0ZXJzVG9MbmdMYXQiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7OztRQWNnQkEsaUIsR0FBQUEsaUI7O0FBZGhCOztBQUVBOzs7Ozs7Ozs7OztBQVdBO0FBQ08sU0FBU0EsaUJBQVQsT0FNSjtBQUFBLE1BTERDLE1BS0MsUUFMREEsTUFLQztBQUFBLE1BSkRDLFFBSUMsUUFKREEsUUFJQztBQUFBLE1BSERDLFFBR0MsUUFIREEsUUFHQztBQUFBLE1BRkRDLFVBRUMsUUFGREEsVUFFQztBQUFBLE1BRERDLFFBQ0MsUUFEREEsUUFDQztBQUFBLE1BQ01DLFFBRE4sR0FDa0JMLE1BRGxCLENBQ01LLFFBRE47O0FBRUQsTUFBTUMsV0FBVyw4QkFBd0JGLFFBQXhCLENBQWpCOztBQUVBLE1BQUksQ0FBQ0MsUUFBTCxFQUFlO0FBQ2IsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBTztBQUNMRSxjQUFVO0FBQ1JDLG1CQUFhLENBQ1hGLFNBQVNHLGlCQUFULENBQTJCSixRQUEzQixFQUFxQyxDQUNuQ0osWUFBWSxNQUFNQyxXQUFXLENBQTdCLENBRG1DLEVBRW5DRCxZQUFZLE1BQU1DLFdBQVcsQ0FBN0IsQ0FGbUMsQ0FBckMsQ0FEVyxFQUtYSSxTQUFTRyxpQkFBVCxDQUEyQkosUUFBM0IsRUFBcUMsQ0FDbkNKLFlBQVksTUFBTUMsV0FBVyxDQUE3QixDQURtQyxFQUVuQ0QsWUFBWSxNQUFNQyxXQUFXLENBQTdCLENBRm1DLENBQXJDLENBTFcsRUFTWEksU0FBU0csaUJBQVQsQ0FBMkJKLFFBQTNCLEVBQXFDLENBQ25DSixZQUFZLE1BQU1DLFdBQVcsQ0FBN0IsQ0FEbUMsRUFFbkNELFlBQVksTUFBTUMsV0FBVyxDQUE3QixDQUZtQyxDQUFyQyxDQVRXLEVBYVhJLFNBQVNHLGlCQUFULENBQTJCSixRQUEzQixFQUFxQyxDQUNuQ0osWUFBWSxNQUFNQyxXQUFXLENBQTdCLENBRG1DLEVBRW5DRCxZQUFZLE1BQU1DLFdBQVcsQ0FBN0IsQ0FGbUMsQ0FBckMsQ0FiVyxFQWlCWEksU0FBU0csaUJBQVQsQ0FBMkJKLFFBQTNCLEVBQXFDLENBQ25DSixZQUFZLE1BQU1DLFdBQVcsQ0FBN0IsQ0FEbUMsRUFFbkNELFlBQVksTUFBTUMsV0FBVyxDQUE3QixDQUZtQyxDQUFyQyxDQWpCVyxDQURMO0FBdUJSUSxZQUFNO0FBdkJFLEtBREw7QUEwQkxQO0FBMUJLLEdBQVA7QUE0QkQiLCJmaWxlIjoiZ3JpZC11dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7V2ViTWVyY2F0b3JWaWV3cG9ydH0gZnJvbSAnZGVjay5nbCc7XG5cbi8qKlxuICogdG9wIGxlZnQgb2YgdGhlIGdyaWQgdG8gYSBzcXVhcmUgcG9seWdvbiBmb3IgdGhlIGhvdmVyIGxheWVyXG4gKiBhbmQgY3VycmVudCBsYXRpdHVkZVxuICogQHBhcmFtIHtvYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtudW1iZXJ9IGNlbGxTaXplXG4gKiBAcGFyYW0ge251bWJlcn0gY292ZXJhZ2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge29iamVjdH0gbWFwU3RhdGVcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gZ2VvanNvbiBmZWF0dXJlXG4gKi9cblxuLy8gVE9ETzogVEVTVFxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50VG9Qb2x5Z29uR2VvKHtcbiAgb2JqZWN0LFxuICBjZWxsU2l6ZSxcbiAgY292ZXJhZ2UsXG4gIHByb3BlcnRpZXMsXG4gIG1hcFN0YXRlXG59KSB7XG4gIGNvbnN0IHtwb3NpdGlvbn0gPSBvYmplY3Q7XG4gIGNvbnN0IHZpZXdwb3J0ID0gbmV3IFdlYk1lcmNhdG9yVmlld3BvcnQobWFwU3RhdGUpO1xuXG4gIGlmICghcG9zaXRpb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIGNvb3JkaW5hdGVzOiBbXG4gICAgICAgIHZpZXdwb3J0LmFkZE1ldGVyc1RvTG5nTGF0KHBvc2l0aW9uLCBbXG4gICAgICAgICAgY2VsbFNpemUgKiAoMC41IC0gY292ZXJhZ2UgLyAyKSxcbiAgICAgICAgICBjZWxsU2l6ZSAqICgwLjUgLSBjb3ZlcmFnZSAvIDIpXG4gICAgICAgIF0pLFxuICAgICAgICB2aWV3cG9ydC5hZGRNZXRlcnNUb0xuZ0xhdChwb3NpdGlvbiwgW1xuICAgICAgICAgIGNlbGxTaXplICogKDAuNSArIGNvdmVyYWdlIC8gMiksXG4gICAgICAgICAgY2VsbFNpemUgKiAoMC41IC0gY292ZXJhZ2UgLyAyKVxuICAgICAgICBdKSxcbiAgICAgICAgdmlld3BvcnQuYWRkTWV0ZXJzVG9MbmdMYXQocG9zaXRpb24sIFtcbiAgICAgICAgICBjZWxsU2l6ZSAqICgwLjUgKyBjb3ZlcmFnZSAvIDIpLFxuICAgICAgICAgIGNlbGxTaXplICogKDAuNSArIGNvdmVyYWdlIC8gMilcbiAgICAgICAgXSksXG4gICAgICAgIHZpZXdwb3J0LmFkZE1ldGVyc1RvTG5nTGF0KHBvc2l0aW9uLCBbXG4gICAgICAgICAgY2VsbFNpemUgKiAoMC41IC0gY292ZXJhZ2UgLyAyKSxcbiAgICAgICAgICBjZWxsU2l6ZSAqICgwLjUgKyBjb3ZlcmFnZSAvIDIpXG4gICAgICAgIF0pLFxuICAgICAgICB2aWV3cG9ydC5hZGRNZXRlcnNUb0xuZ0xhdChwb3NpdGlvbiwgW1xuICAgICAgICAgIGNlbGxTaXplICogKDAuNSAtIGNvdmVyYWdlIC8gMiksXG4gICAgICAgICAgY2VsbFNpemUgKiAoMC41IC0gY292ZXJhZ2UgLyAyKVxuICAgICAgICBdKVxuICAgICAgXSxcbiAgICAgIHR5cGU6ICdMaW5lU3RyaW5nJ1xuICAgIH0sXG4gICAgcHJvcGVydGllc1xuICB9O1xufVxuIl19